msgid ""
msgstr ""
"Project-Id-Version: BeeWare 0.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-06-09 04:13+0000\n"
"PO-Revision-Date: 2025-06-18 21:55+0000\n"
"Last-Translator: John <johnzhou721@gmail.com>\n"
"Language-Team: Chinese (Simplified Han script) <https://hosted.weblate.org/"
"projects/beeware/tutorial/tutorial-0/zh_Hans/>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Weblate 5.12.1\n"
"Generated-By: Babel 2.17.0\n"

#: ../../tutorial/tutorial-0.rst:3 9587bfc7c6074b9ca2134b5aac25ae99
msgid "Tutorial 0 - Let's get set up!"
msgstr "教程 0 - 让我们开始吧！"

#: ../../tutorial/tutorial-0.rst:5 06ece4cb8d7e499ab393e14bfb6b4e00
msgid "Before we build our first BeeWare app, we have to make sure we've got all the prerequisites for running BeeWare."
msgstr "在构建第一个使用 BeeWare 的应用程序之前，我们必须确保已具备运行 BeeWare 的所有先决条件。"

#: ../../tutorial/tutorial-0.rst:11 1cb4c29fde044d498fffc988113eb66c
msgid "Install Python"
msgstr "安装 Python"

#: ../../tutorial/tutorial-0.rst:13 2204fec2783a42459e90979c2af43f61
msgid "The first thing we'll need is a working Python interpreter."
msgstr "首先，我们需要一个正常工作的 Python 解释器。"

#: ../../tutorial/tutorial-0.rst:17 ../../tutorial/tutorial-0.rst:86
#: ../../tutorial/tutorial-0.rst:155 444d372488cc4d09a448ec12f9d30f9f
#: 5aaf9a32f45b40928f0370675988b8fa bceed47535c54f8b8a725d32f0c46440
msgid "macOS"
msgstr "macOS"

#: ../../tutorial/tutorial-0.rst:19 7db6c8bbc9114a949386cb8f075b3c58
msgid "If you're on macOS, a recent version of Python is included with Xcode or the command line developer tools. To check if you already have it, run the following command:"
msgstr "如果您使用的是 macOS，Xcode 或命令行开发工具中会包含最新版本的 Python。要检查是否已安装，请运行以下命令："

#: ../../tutorial/tutorial-0.rst:27 fea807a4d02744ae82b4616fd7aa2ba7
msgid "If Python is installed, you'll see its version number. Otherwise, you'll be prompted to install the command line developer tools."
msgstr "如果已安装 Python，则会看到其版本号。否则，系统会提示您安装命令行开发工具。"

#: ../../tutorial/tutorial-0.rst:30 1e628ce004f64e32b10e467c194792bd
msgid "You should ensure that you are using Python 3.9 or newer. If it isn't, you'll need to upgrade your Python install. You can get the official installer from `the Python website <https://www.python.org/downloads>`_. You can use any stable version of Python from 3.9 onward. We'd advise avoiding alphas, betas, and release candidates unless you *really* know what you're doing."
msgstr "您应该确保您使用的是 Python 3.9 或更高版本。如果不是，则需要升级 Python 安装。您可以从 `Python 官网 <https://www.python.org/downloads>`_ 获取官方安装程序。从 3.9 开始，您可以使用任何稳定版本的 Python。我们建议避免使用 Alpha、Beta 和候选版本，除非你真的知道自己在做什么。"

#: ../../tutorial/tutorial-0.rst:37 ../../tutorial/tutorial-0.rst:96
#: ../../tutorial/tutorial-0.rst:164 42aba7fee0f348ddb1d57e4a9e9045a4
#: 888b63e4d3d44a12bcf6972732f0fe17 eaf453c1298d4ee2848db3451024213e
msgid "Linux"
msgstr "Linux"

#: ../../tutorial/tutorial-0.rst:39 10a683506fda42759d51e868834c537d
msgid "If you're on Linux, you'll install Python using the system package manager (``apt`` on Debian/Ubuntu/Mint, ``dnf`` on Fedora, or ``pacman`` on Arch)."
msgstr "如果您使用的是 Linux，您将使用系统软件包管理器（Debian/Ubuntu/Mint 上的 ``apt``，Fedora 上的 ``dnf``，或 Arch 上的 ``pacman``）安装 Python。"

#: ../../tutorial/tutorial-0.rst:42 adce3faaffcd40d1a28f89d047938264
msgid "You should ensure that the system Python is Python 3.9 or newer; if it isn't (e.g., Ubuntu 20.04 ships with Python 3.8), you'll need to upgrade your Linux distribution to something more recent."
msgstr "您应该确保系统 Python 是 Python 3.9 或更高；如果不是（例如，Ubuntu 20.04 附带 Python 3.8），您需要将您的 Linux 发行版升级到更新版本。"

#: ../../tutorial/tutorial-0.rst:46 e0d6bb40e7344cc793a990113f5ba4a7
msgid "Support for Raspberry Pi is limited at this time."
msgstr "目前对 Raspberry Pi 的支持有限。"

#: ../../tutorial/tutorial-0.rst:48 ../../tutorial/tutorial-0.rst:131
#: ../../tutorial/tutorial-0.rst:173 475e2ce3b63c45949902cd86157bd6d4
#: e9fa66df94074dd99ba61ffbd676dfd6 f5451a1fd3fd43aaad0dd827afce6e54
msgid "Windows"
msgstr "Windows"

#: ../../tutorial/tutorial-0.rst:50 65b95e3064f74fed82804b5d198adb1b
msgid "If you're on Windows, you can get the official installer from `the Python website <https://www.python.org/downloads>`_. You can use any stable version of Python from 3.9 to 3.13. We'd also advise avoiding alphas, betas, and release candidates unless you *really* know what you're doing."
msgstr ""
"如果您使用的是 Windows，您可以从 `Python 网站 <https://www.python.org/"
"downloads>`_\\ 获取官方安装程序。您可以使用 Python 3.9 到 3.13 "
"的任何稳定版本。我们还建议避免使用 Alpha、Beta 和候选版本，除非你\\ *真的*\\ "
"知道自己在做什么。"

#: ../../tutorial/tutorial-0.rst:55 61f67ef435394e51a122ee3ca6ea1036
msgid "Alternative Python distributions"
msgstr "其他 Python 发行版"

#: ../../tutorial/tutorial-0.rst:57 b3e83eca2b144a1abebb2222ca215823
msgid "There are lots of different ways of installing Python. You can install Python through `homebrew <https://docs.brew.sh/Homebrew-and-Python>`__. You can use `pyenv <https://github.com/pyenv/pyenv#simple-python-version-management-pyenv>`__ to manage multiple Python installs on the same machine. Windows users can install Python from the Windows App Store. Users from a data science background might want to use `Anaconda <https://docs.anaconda.com/anaconda/install/>`__ or `Miniconda <https://docs.conda.io/en/latest/miniconda.html>`__."
msgstr "安装 Python 有很多不同的方法。您可以通过 `homebrew <https://docs.brew.sh/Homebrew-and-Python>`__ 安装 Python。您可以使用 `pyenv <https://github.com/pyenv/pyenv#simple-python-version-management-pyenv>`__ 来管理同一台机器上的多个 Python 安装。Windows 用户可以从 Windows 应用商店安装 Python。数据科学背景的用户可以考虑使用 `Anaconda <https://docs.anaconda.com/anaconda/install/>`__ 或 `Miniconda <https://docs.conda.io/en/latest/miniconda.html>`__。"

#: ../../tutorial/tutorial-0.rst:67 fd26db6d3e2642edae8273437077d978
msgid "If you're on macOS or Windows, it doesn't matter *how* you've installed Python - it only matters that you can run ``python3`` from your operating system's command prompt/terminal application, and get a working Python interpreter."
msgstr "如果您使用的是 macOS 或 Windows 操作系统，<i>如何</i>安装 Python 并不重要，重要的是您能从操作系统的命令提示符/终端应用程序中运行 ``python3``，并获得一个正常工作的 Python 解释器。"

#: ../../tutorial/tutorial-0.rst:72 19f343f736d84d099a12dbfab082db5c
msgid "If you're on Linux, you *must* use the system Python provided by your operating system. You will be able to complete *most* of this tutorial using a non-system Python, but you won't be able to package your application for distribution to others."
msgstr "如果您使用 Linux，则\\ **必须**\\ 使用操作系统提供的系统 Python。您可以使用非系统 Python 完成本教程的\\ *大部分*\\ 内容，但是您无法将应用程序打包发布给他人。"

#: ../../tutorial/tutorial-0.rst:80 381befb1a2ce4f64bb88caed214385f5
msgid "Install dependencies"
msgstr "安装依赖项"

#: ../../tutorial/tutorial-0.rst:82 64eb33c6fe5f4226aa59d89245430f73
msgid "Next, install the additional dependencies needed for your operating system:"
msgstr "接下来，安装您的操作系统所需的其他依赖项："

#: ../../tutorial/tutorial-0.rst:88 615b1da0aac04ac886f199f39bfd1c16
msgid "Building BeeWare apps on macOS requires:"
msgstr "在 macOS 上构建 BeeWare 应用程序需要："

#: ../../tutorial/tutorial-0.rst:90 f456ad989eb34a2eb67bce65d4fc80e5
msgid "**Git**, a version control system. This is included with Xcode or the command line developer tools, which you installed above. You may need to open Xcode for the first time in order for Git to work in your terminal session. If it still doesn't register that Git is installed, you may need to restart your terminal session."
msgstr "**Git**，一个版本控制系统。上面已安装的 Xcode 或其命令行开发工具已经包含了Git。您可能需要第一次打开 Xcode 以后才能再命令行会话中使Git正常工作。如果仍然无法识别 Git，可能需要重启您的命令行会话。"

#: ../../tutorial/tutorial-0.rst:98 d4519e85397544a5bb171a71005ac721
msgid "To support local development, you'll need to install some system packages. The list of packages required varies depending on your distribution:"
msgstr "为支持本地开发，您将需要安装一些系统软件包。所需的软件包列表因发行版而异："

#: ../../tutorial/tutorial-0.rst:101 2c808a4cdf25444f94e503cf383c8f84
msgid "**Ubuntu / Debian**"
msgstr "**Ubuntu 或 Debian**"

#: ../../tutorial/tutorial-0.rst:112 d295660a880644e8853bc231b200e7ce
msgid "**Fedora**"
msgstr "**Fedora**"

#: ../../tutorial/tutorial-0.rst:118 d58af62970b246b083d98ed19de29dce
msgid "**Arch / Manjaro**"
msgstr "**Arch 或 Manjaro**"

#: ../../tutorial/tutorial-0.rst:124 b679b1d38e364375ac608b0cdb0e8ed6
msgid "**OpenSUSE Tumbleweed**"
msgstr "**OpenSUSE Tumbleweed**"

#: ../../tutorial/tutorial-0.rst:133 f9e44c54b9cd4adf96124dea5873dd9b
msgid "Building BeeWare apps on Windows requires:"
msgstr "在 Windows 上构建 BeeWare 应用程序需要："

#: ../../tutorial/tutorial-0.rst:135 d8deecaffa7b45a0a03a37d2b99a5a51
msgid "**Git**, a version control system. You can download Git from from `git-scm.com <https://git-scm.com/downloads/>`__."
msgstr "**Git**，一个版本控制系统。您可以从 `git-scm.com <https://git-scm.com/downloads/>`__ 下载 Git。"

#: ../../tutorial/tutorial-0.rst:138 410be4b3be9f402bb96e92ab4653130a
msgid "After installing these tools, you should ensure you restart any terminal sessions. Windows will only expose newly installed tools terminals started *after* the install has completed."
msgstr "安装这些工具后，应确保重新启动任何终端会话。Windows 只在安装完成后开始的命令行，才会显示新安装的工具。"

#: ../../tutorial/tutorial-0.rst:143 8fe0fbe97ab64995bfd337f9cc842e36
msgid "Set up a virtual environment"
msgstr "建立虚拟环境"

#: ../../tutorial/tutorial-0.rst:145 e065c5b2c8744344a8a7ec18e7b7cb76
msgid "We're now going to create a virtual environment - a \"sandbox\" that we can use to isolate our work on this tutorial from our main Python installation. If we install packages into the virtual environment, our main Python installation (and any other Python projects on our computer) won't be affected. If we make a complete mess of our virtual environment, we'll be able to simply delete it and start again, without affecting any other Python project on our computer, and without the need to re-install Python."
msgstr "我们现在要创建一个虚拟环境--一个 \"沙箱\"，用来将本教程的工作与我们的主 Python 安装隔离开来。如果我们将软件包安装到虚拟环境中，我们的主 Python 安装（以及计算机上的任何其他 Python 项目）将不会受到影响。如果我们把虚拟环境弄得一团糟，我们可以简单地删除它，然后重新开始，不会影响计算机上的任何其他 Python 项目，也不需要重新安装 Python。"

#: ../../tutorial/tutorial-0.rst:182 b27810f955444f0ca5597b9ce7d3fc98
msgid "If you're not using Python 3.12, replace the ``-3.12`` in these instructions with the version number that you are using."
msgstr "如果您不在使用 Python 3.12，将指示中的 ``-3.12`` 替换为您在使用的版本号。"

#: ../../tutorial/tutorial-0.rst:185 0254118fc6fc4d8faf2106a23d378f9d
msgid "Errors running PowerShell Scripts"
msgstr "运行 PowerShell 脚本时出现的错误"

#: ../../tutorial/tutorial-0.rst:187 23ec98055b8649b0ab19028ec3367628
msgid "If you're using PowerShell, and you receive the error::"
msgstr "如果使用 PowerShell 时收到以下错误信息::"

#: ../../tutorial/tutorial-0.rst:191 0507d875181c41f8aa276fd7225d35a8
msgid "Your Windows account doesn't have permissions to run scripts. To fix this:"
msgstr "您的 Windows 账户没有运行脚本的权限。要解决这个问题："

#: ../../tutorial/tutorial-0.rst:193 1864aba9319940e980def5160f4d56bc
msgid "Run `Windows PowerShell as Administrator <https://learn.microsoft.com/en-us/powershell/scripting/windows-powershell/starting-windows-powershell?view=powershell-7.4>`_."
msgstr "`以管理员身份运行 PowerShell <https://learn.microsoft.com/en-us/powershell/scripting/windows-powershell/starting-windows-powershell?view=powershell-7.4>`_."

#: ../../tutorial/tutorial-0.rst:194 d313c4e84434405291ed2dff976b3ae7
msgid "Run ``set-executionpolicy RemoteSigned``"
msgstr "运行 ``set-executionpolicy RemoteSigned``"

#: ../../tutorial/tutorial-0.rst:195 ffff7110029444109f1ac7f0a7830415
msgid "Select ``Y`` to change the execution policy."
msgstr "选择 ``Y`` 更改执行策略。"

#: ../../tutorial/tutorial-0.rst:197 18dc7124901344c4956d61f2a54c3d4c
msgid "Once you've done this you can rerun ``beeware-venv\\Scripts\\activate.ps1`` in your original PowerShell session (or a new session in the same directory)."
msgstr "完成后，您就可以在原来的 PowerShell 会话（或同一目录下的新会话）中重新运行 ``beeware-venv\\scripts\\activate.ps1``。"

#: ../../tutorial/tutorial-0.rst:201 8b84f086eeb14f80b5c330e01b7d6e5f
msgid "If this worked, your prompt should now be changed - it should have a ``(beeware-venv)`` prefix. This lets you know that you're currently in your BeeWare virtual environment. Whenever you're working on this tutorial, you should make sure your virtual environment is activated. If it isn't, re-run the last command (the ``activate`` command) to re-activate your environment."
msgstr "如果这样做成功了，您的提示符现在应该有所改变--它会带有 ``(beeware-venv)`` 前缀。这样，您就可以知道您当前正处于 BeeWare 虚拟环境中。无论何时运行本教程，都应确保虚拟环境已激活。如果没有激活，请重新执行前一条命令（``activate``）以重新激活虚拟环境。"

#: ../../tutorial/tutorial-0.rst:207 2667db531a074355b20153fa212419e9
msgid "Alternative virtual environments"
msgstr "替代虚拟环境"

#: ../../tutorial/tutorial-0.rst:209 09a8785bf5a849eca7286313bb030ff7
msgid "If you're using Anaconda or miniconda, you may be more familiar with using conda environments. You might also have heard of ``virtualenv``, a predecessor to Python's built in ``venv`` module. As with Python installs - if you're on macOS or Windows, it doesn't matter *how* you create your virtual environment, as long as you have one. If you're on Linux, you should stick to ``venv`` and the system Python."
msgstr "如果您使用的是 Anaconda 或 miniconda，那么您可能对使用 conda 环境更为熟悉。您可能还听说过 ``virtualenv``，它是 Python 内置的 ``venv`` 模块的前身。就像 Python 安装一样，如您使用的是 macOS 或 Windows，那么如何创建虚拟环境并不重要，只要有就够了。如果在 Linux 上，则应坚持使用 ``venv`` 和系统 Python。"

#: ../../tutorial/tutorial-0.rst:217 f86e9232dfcf4daeb09c46abbf8eddc5
msgid "Next steps"
msgstr "下一步"

#: ../../tutorial/tutorial-0.rst:219 cee844a15596488fbc0e7c7238df750f
msgid "We've now set up our environment. We're ready to :doc:`create our first BeeWare application <tutorial-1>`."
msgstr "现在我们已经设置好了环境。我们已经准备创建\\ :doc:`您的第一个应用程序 <tutorial-1>`\\ 了。"

#~ msgid "Run Windows PowerShell as Administrator."
#~ msgstr "以管理员身份运行 Windows PowerShell。"

#~ msgid "**Git**, a version control system. This is included with Xcode or the command line developer tools, which you installed above."
#~ msgstr "*版本控制系统 *Git**。它包含在您安装的 Xcode 或命令行开发工具中。"
