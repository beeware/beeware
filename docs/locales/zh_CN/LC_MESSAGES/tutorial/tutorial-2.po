msgid ""
msgstr ""
"Project-Id-Version: BeeWare 0.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-06-09 04:13+0000\n"
"PO-Revision-Date: 2025-07-07 01:02+0000\n"
"Last-Translator: John <johnzhou721@gmail.com>\n"
"Language-Team: Chinese (Simplified Han script) <https://hosted.weblate.org/"
"projects/beeware/tutorial/tutorial-2/zh_Hans/>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Weblate 5.13-dev\n"
"Generated-By: Babel 2.17.0\n"

#: ../../tutorial/tutorial-2.rst:3 2e1be6a8aa08484fb6e79eb40a1af561
msgid "Tutorial 2 - Making it interesting"
msgstr "教程 2 - 使之更有趣"

#: ../../tutorial/tutorial-2.rst:5 2a7bd1732fe245ec99be0493cb4fd53c
msgid "In :doc:`Tutorial 1 <tutorial-1>`, we generated a stub project that was able to run, but we didn't write any code ourselves. Let's take a look at what was generated for us."
msgstr "在 :doc:`教程 1<tutorial-1>` 中，我们生成了一个可以运行的基础项目，但我们自己并没有编写任何代码。让我们看看 Briefcase 为我们生成了什么。"

#: ../../tutorial/tutorial-2.rst:10 36c79c9915674ccfbc12bcc0734bcf35
msgid "What was generated"
msgstr "生成的内容"

#: ../../tutorial/tutorial-2.rst:12 721f5201e79c44fdac204d63312a6f2e
msgid "In the ``src/helloworld`` directory, you should see 3 files: ``__init__.py``, ``__main__.py`` and ``app.py``."
msgstr "在 ``src/helloworld`` 目录中，你应该看到 3 个文件：``__init__.py``、``__main__.py`` 和 ``app.py``。"

#: ../../tutorial/tutorial-2.rst:15 de38dacd1a0d4c348d934fce208a6bd3
msgid "``__init__.py`` marks the ``helloworld`` directory as an importable Python module. It is an empty file; the very fact it exists tells the Python interpreter that the ``helloworld`` directory defines a module."
msgstr "``__init__.py`` 将 ``helloworld`` 目录标记为可导入的 Python 模块。这是一个空文件；它的存在告诉 Python 解释器 helloworld 目录定义了一个模块。"

#: ../../tutorial/tutorial-2.rst:19 26dab7a022e948289e9acf4e07b634fa
msgid "``__main__.py`` marks the ``helloworld`` module as a special kind of module - an executable module. If you try to run the ``helloworld`` module using ``python -m helloworld``, the ``__main__.py`` file is where Python will start executing. The contents of ``__main__.py`` is relatively simple::"
msgstr "``__main__.py`` 将 ``helloworld`` 模块标记为一种特殊的模块 - 可执行模块。如果你尝试使用 ``python -m helloworld`` 试图运行 ``helloworld`` 模块，Python 将从 ``__main__.py`` 文件开始执行。 ``__main__.py`` 的内容相对简单::"

#: ../../tutorial/tutorial-2.rst:29 0d4ebd6dfe7c48fbb51894c045ff24fc
msgid "This file does two things:"
msgstr "此文件做以下两件事："

#: ../../tutorial/tutorial-2.rst:31 6d23aa2404fc48ba96da528ccc1f2940
msgid "It imports the ``main`` method from from the ``helloworld`` app."
msgstr "它从 ``helloworld`` 应用程序导入了 ``main`` 方法。"

#: ../../tutorial/tutorial-2.rst:32 0b48d24bc644417e829bacd14d0f3cdc
msgid "Then, it starts the application’s main loop. The main loop is the way a GUI application listens for user input (like mouse clicks and keyboard presses)."
msgstr "然后，它会开始应用程序的主循环，以便侦听用户输入（例如鼠标点击或键盘按键）。"

#: ../../tutorial/tutorial-2.rst:35 09fd77cade1b42b4a8b88e37bb0da6e3
msgid "The more interesting file is ``app.py`` - this contains the logic that creates our application window::"
msgstr "更有趣的文件是 ``app.py`` - 它包含创建我们应用程序窗口的逻辑::"

#: ../../tutorial/tutorial-2.rst:52 df7ece5eaff04ed19ab39cdb23b6ac77
msgid "Let's go through this line by line::"
msgstr "让我们逐行查看::"

#: ../../tutorial/tutorial-2.rst:57 f5ddb2b7e7b844a69c517fd33d19a19d
msgid "First, we import the ``toga`` widget toolkit, as well as some style-related utility constants. Our code doesn't use these yet - but we'll make use of them shortly."
msgstr "首先，我们导入 ``toga`` "
"控件工具包，以及一些与样式相关的实用常量。目前我们的代码还没有使用这些——但我"
"们很快就会用到它们。"

#: ../../tutorial/tutorial-2.rst:61 a3f7bf04b0ac4a81951a5ed777d42987
msgid "Then, we define a class::"
msgstr "然后，我们定义了一个类 ::"

#: ../../tutorial/tutorial-2.rst:65 9f8637c8b8674d85a500d98d1a8c8d3a
msgid "Each Toga application has a single ``toga.App`` instance, representing the running entity that is the application. The app may end up managing multiple windows; but for simple applications, there will be a single main window."
msgstr "每个 Toga 应用程序都有一个 ``toga.App`` 实例，代表应用程序的运行实体。应用程序最终可能会管理多个窗口；但是对于简单的应用程序来说，可能只有一个主窗口。"

#: ../../tutorial/tutorial-2.rst:69 32d1c270af7245718f91161251d34f81
msgid "Next, we define a ``startup()`` method::"
msgstr "接下来，我们定义一个 ``startup()`` 方法 (startup意为启动)::"

#: ../../tutorial/tutorial-2.rst:74 43ade04c31ae40fda6b416406baab307
msgid "The first thing the startup method does is to define a main box. Toga's layout scheme behaves similar to HTML. You build an application by constructing a collection of boxes, each of which contains other boxes, or actual widgets. You then apply styles to these boxes to define how they will consume the available window space."
msgstr ""
"startup 方法的第一件事是定义一个主盒子 (main box)。Toga 的布局方案类似于 "
"HTML。你通过构造一系列盒子 (box) 来构建应用程序，"
"每个盒子包含其他盒子或实际的控件 (widgets)。然后，你对这些盒子应用样式 "
"(styles)，以定义它们将如何消耗可用的窗口空间 (window space)。"

#: ../../tutorial/tutorial-2.rst:80 a0e8f55b28d04de98074f7fb4227a269
msgid "In this application, we define a single box, but we don't put anything into it."
msgstr "在这个应用程序中，我们定义了一个单独的空盒子 (我们没有放任何东西进去)。"

#: ../../tutorial/tutorial-2.rst:82 1f7f4fa8a2244ceea804514e62a22344
msgid "Next, we define a window into which we can put this empty box::"
msgstr "接下来，我们定义一个可以将这个空盒子放入其中的窗口::"

#: ../../tutorial/tutorial-2.rst:86 2ef76961458944b6a2d73dd38e60d4a1
msgid "This creates an instance of a ``toga.MainWindow``, which will have a title matching the application's name. A Main Window is a special kind of window in Toga - it's a window that is closely bound to the life cycle of the app. When the Main Window is closed, the application exits. The Main Window is also the window that has the application's menu (if you're on a platform like Windows where menu bars are part of the window)."
msgstr "这将创建一个 ``toga.MainWindow`` 的实例，它的标题 (title) 将与应用程序的名称 (self.formal_name) 匹配。主窗口是 Toga 中的一种特殊窗口——它与应用程序的生命周期 (life cycle) 密切绑定。主窗口关闭，应用程序就退出了。主窗口也具有应用程序菜单（例如类似 Windows 这样的平台上，菜单栏是窗口的一部分）。"

#: ../../tutorial/tutorial-2.rst:93 83ddcb8dc2f54f7482e37d1144f29626
msgid "Where is my window?"
msgstr "我的窗口怎么没有出现？"

#: ../../tutorial/tutorial-2.rst:95 969f733e9f794de9b374ad9163e7ac85
msgid "If you have made an error in your code, the main window of the app may not display. If this happens, you can type **Ctrl+C** in the terminal where you started the app. This will stop the app. You can then fix the error and restart the app."
msgstr "如果你写的代码中有错误，app的主窗口可能不会显示。要是真这样了，你可以找到先前启动app的终端窗口，并在其中按下\\ **Ctrl + C**，以终止app运行。之后，你就可以修改代码里的错误，再重启app。"

#: ../../tutorial/tutorial-2.rst:99 e612fb6b63b14bdcb39b5626b021c777
msgid "We then add our empty box as the content of the main window, and instruct the application to show our window::"
msgstr "然后，我们将空盒子作为主窗口的内容，并指示应用程序显示我们的窗口::"

#: ../../tutorial/tutorial-2.rst:105 1ce27dec55a74047bf2e8539c8efbc73
msgid "Last of all, we define a ``main()`` function. This is what creates the instance of our application::"
msgstr "最后，我们定义一个 ``main()`` 方法。它将创建应用程序的实例::"

#: ../../tutorial/tutorial-2.rst:111 bc7b7fdf8a5c43ffb2fdf01859bd16aa
msgid "This ``main()`` method is the one that is imported and invoked by ``__main__.py``. It creates and returns an instance of our ``HelloWorld`` application."
msgstr "这个 ``main()`` 方法由 ``__main__.py`` 导入并调用。它创建并返回我们的 ``HelloWorld`` 应用程序的实例。"

#: ../../tutorial/tutorial-2.rst:115 f3f8cdad383346459a1c835fa92f112c
msgid "That's the simplest possible Toga application. Let's put some of our own content into the application, and make the app do something interesting."
msgstr "这是最简单可能的 Toga 应用程序。接下来，让我们在应用程序中加入一些我们自己的内容，使应用程序做一些有趣的事情。"

#: ../../tutorial/tutorial-2.rst:119 9e8807c5553942e4a4953098041741aa
msgid "Adding some content of our own"
msgstr "添加一些我们自己的内容"

#: ../../tutorial/tutorial-2.rst:121 3a5a7f2ca0e2483f93fef97babc01fc7
msgid "Let's do something more interesting with our ``HelloWorld`` app."
msgstr "对我们的 ``HelloWorld`` 应用程序，做些更有意思的事吧。"

#: ../../tutorial/tutorial-2.rst:125 e44cc783a890402085f37580f482fac8
msgid "When you make these changes, make sure you keep the imports at the top of the file, and the ``main()`` at the bottom of the file. You only need to update the ``HelloWorld`` class."
msgstr "在做这些更改时，确保不要删除文件顶部的导入 (imports)，也不要删除底部的 ``main()``。您只需更新 ``HelloWorld`` 类。"

#: ../../tutorial/tutorial-2.rst:129 8436dd50e42c4b5e9bbbb7a5a82add25
msgid "Modify your ``HelloWorld`` class inside ``src/helloworld/app.py`` so that it looks like this::"
msgstr "修改 ``src/helloworld/app.py`` 中的 ``HelloWorld`` 类，使其看起来像这样::"

#: ../../tutorial/tutorial-2.rst:163 ebf3b206e6364dafa694bb0a5d745911
msgid "Let's look in detail at what has changed."
msgstr "让我们详细看看有哪些变化。"

#: ../../tutorial/tutorial-2.rst:165 0bcd8b52741747f9a21641e9f4d5ab74
msgid "We're still creating a main box; however, we are now applying a style::"
msgstr "我们仍然在创建一个主盒子；然而，现在我们正在应用一个样式::"

#: ../../tutorial/tutorial-2.rst:169 69a49e9c77ee4dc29cbbab0929842838
msgid "Toga's built-in layout system is called \"Pack\". It behaves a lot like CSS. You define objects in a hierarchy - in HTML, the objects are ``<div>``, ``<span>``, and other DOM elements; in Toga, they're widgets and boxes. You can then assign styles to the individual elements. In this case, we're indicating that this is a ``COLUMN`` box - that is, it is a box that will consume all the available width, and will expand its height as content is added, but it will try to be as short as possible."
msgstr ""
"Toga 的内置布局系统称为 \"Pack\" (包)。它的行为很像 CSS (Cascading Style "
"Sheets 层叠样式表)。你可以在一个层次结构中定义对象--在 HTML 中，对象是 "
"``<div>`` (division 块级容器)、``<span>`` (inline span 内联容器) 和其他 DOM ("
"Document Object Model 文档对象模型) 元素；在 Toga 中，对象是控件 (widgets ) "
"和盒子 (boxes)。然后，您可以为各个元素指定样式。在本例中，我们表示这是一个 "
"``COLUMN`` (垂直) 框，也就是说，它是一个将占用所有可用宽度 (width) 的框，"
"并会随着内容的添加而扩大高度 (height)，但会尽量使高度更短。"

#: ../../tutorial/tutorial-2.rst:178 e4c4909f5fc74238b79131c26ff237e1
msgid "For more advanced uses, Toga also supports a separate style object, which is used like this::"
msgstr "对于更高级的使用，Toga 也支持可以被这样使用的单独的样式对象::"

#: ../../tutorial/tutorial-2.rst:184 e23e0c1845b74ae7a43b340944dd39d7
msgid "Next, we define a couple of widgets::"
msgstr "接下来，我们定义了一些控件::"

#: ../../tutorial/tutorial-2.rst:192 c3ba79ba67d5456b874ec417701b6d56
msgid "Here, we define a Label and a TextInput. Both widgets have styles associated with them; the label will have 5px of margin on its left and right, and no margin on the top and bottom. The TextInput is marked as being flexible - that is, it will absorb all available space in its layout axis."
msgstr ""
"在这里，我们定义了一个标签 (Label) 和一个文本输入框 "
"(TextInput)。这两个控件都有与其相关的样式；标签左右会各有 5px "
"的填充，上下没有填充。文本输入框是被标记为灵活的——也就是说，它将吸收其布局方"
"向上所有可用的空间。"

#: ../../tutorial/tutorial-2.rst:197 c76e44e91a204cad98cc517be7a1bbca
msgid "The TextInput is assigned as an instance variable of the class. This gives us easy access to the widget instance - something that we'll use in a moment."
msgstr "文本输入框 (TextInput) 被分配为类的实例变量。这使我们能够轻松访问控件 "
"(widget) 实例 - 这是我们马上就会使用的东西。"

#: ../../tutorial/tutorial-2.rst:200 6e70c51a7f9f497eb6a5a81880b6fc3c
msgid "Next, we define a box to hold these two widgets::"
msgstr "接下来，我们定义了一个盒子来容纳这两个控件::"

#: ../../tutorial/tutorial-2.rst:206 1e0ddb95c1864299a5d8162142d91775
msgid "The ``name_box`` is a box just like the main box; however, this time, it's a ``ROW`` box. That means content will be added horizontally, and it will try to make its width as narrow as possible. The box also has some margin - 5px on all sides."
msgstr "``name_box`` 就像主盒子一样；然而，这次它是一个 ``ROW`` (水平) 盒子。这意味着内容将会被水平添加，并且它会尽量使其宽度尽可能窄。盒子也有一些空白填充——四周各为 5px。"

#: ../../tutorial/tutorial-2.rst:211 15b359aa12554ee5b2829b96d0296dd9
msgid "Now we define a button::"
msgstr "现在，我们定义一个按钮::"

#: ../../tutorial/tutorial-2.rst:219 fc2b856ffed4497384a8b62d1d1ef874
msgid "The button also has 5px of margin on all sides. We also define a *handler* - a method to invoke when the button is pressed."
msgstr "按钮的四周也有 5px 的填充。我们还定义了一个\\ **处理程序** (handler)——当按钮被按下时要调用的方法。"

#: ../../tutorial/tutorial-2.rst:222 b4c687ebde8c49b7a8d7a2d4e5251585
msgid "Then, we add the name box and the button to the main box::"
msgstr "然后，我们将 name box 和按钮添加到主盒子中::"

#: ../../tutorial/tutorial-2.rst:227 f332b09cbad54558a04eefcac365757a
msgid "This completes our layout; the rest of the startup method is as it was previously - defining a ``MainWindow``, and assigning the main box as the window's content::"
msgstr "这完成了我们的布局；其余的 startup 方法与以前一样 - 定义一个 ``MainWindow`` ，并将主盒子指定为窗口的内容::"

#: ../../tutorial/tutorial-2.rst:235 8c1a144159f04ec19a19723dbb6bd3b1
msgid "The last thing we need to do is define the handler for the button. A handler can be any method, generator, or asynchronous coroutine; it accepts the widget that generated the event as an argument, and will be invoked whenever the button is pressed::"
msgstr ""
"我们需要做的最后一件事，就是定义按钮的处理器(handler)——它可以是任何方法、生成"
"器或异步协程，且接受生成事件的控件 (widget) "
"作为参数。只要按下按钮，就会调用这些处理器::"

#: ../../tutorial/tutorial-2.rst:243 a1fd82f2333b49d59252dd01f4a74dba
msgid "The body of the method is a simple print statement - however, it will interrogate the current value of the name input, and use that content as the text that is printed."
msgstr "方法的主体是一个简单的打印语句——然而，它会使用名称输入的当前值，并使用该内容作为打印的文本。"

#: ../../tutorial/tutorial-2.rst:247 ffc6248d2f224692a081ecaf55ec42a3
msgid "Now that we've made these changes we can see what they look like by starting the application again. As before, we'll use developer mode:"
msgstr "现在我们已经做了这些更改，我们可以通过再次启动应用程序来看看它们的样子。和以前一样，我们将使用开发者模式："

#: ../../tutorial/tutorial-2.rst:252 ../../tutorial/tutorial-2.rst:289
#: 33d4b2deb3874435a9c05b4c52227fe2 606e916df34540f8b8276c605708748b
msgid "macOS"
msgstr "macOS"

#: ../../tutorial/tutorial-2.rst:261 ../../tutorial/tutorial-2.rst:295
#: 51471227c16245ed8b3e1c89bfb531fd e137e8312d734528bb174c3bf9ab339c
msgid "Linux"
msgstr "Linux"

#: ../../tutorial/tutorial-2.rst:270 ../../tutorial/tutorial-2.rst:301
#: 367fc15643d84e93ba694f45a89a41da 8fd90729c1514a9fa81a38354711b13a
msgid "Windows"
msgstr "Windows"

#: ../../tutorial/tutorial-2.rst:279 3413d1d3f70f4a768bdf3f7f8784a2ec
msgid "You'll notice that this time, it *doesn't* install dependencies. Briefcase can detect that the application has been run before, and to save time, will only run the application. If you add new dependencies to your app, you need to make sure that they're installed by passing in a ``-r`` option when you run ``briefcase dev``."
msgstr ""
"你会注意到，这次\\ *没有*\\ 安装依赖项。Briefcase "
"可以检测到已经被运行过的应用程序 -- "
"为了节省时间，它只会运行应用程序，而不会安装依赖项。如果你在应用程序中添加了"
"新的依赖项，你可以在运行 ``briefcase dev`` 时通过 ``-r`` "
"选项来确保它们被安装。"

#: ../../tutorial/tutorial-2.rst:285 231cf3fd1a9c4660b2044d792a50d8de
msgid "This should open a GUI window:"
msgstr "这将打开一个图形用户界面 (GUI) 窗口："

#: ../../tutorial/tutorial-2.rst:291 4c5a7cc62a0a4f529f1304cd9a631270
msgid "Hello World Tutorial 2 window, on macOS"
msgstr "在 MacOS 上的 Hello World 教程 2 窗口"

#: ../../tutorial/tutorial-2.rst:297 8307128a832c40c5b103f73bd417a5a5
msgid "Hello World Tutorial 2 window, on Linux"
msgstr "在 Linux 上的 Hello World 教程 2 窗口"

#: ../../tutorial/tutorial-2.rst:303 9a0cca46d47043228a7390faf3dab05d
msgid "Hello World Tutorial 2 window, on Windows"
msgstr "在 Windows 上的 Hello World 教程 2 窗口"

#: ../../tutorial/tutorial-2.rst:307 38c9aee47c35472fa2d5cc70f839bc0b
msgid "If you enter a name in the text box, and press the GUI button, you should see output appear in the console where you started the application."
msgstr "如果在文本框中输入名称，并按下图形用户界面中的按钮，就会在启动程序的控制台中看到输出结果。"

#: ../../tutorial/tutorial-2.rst:310 aee9f2a8601c49b79f8c4b63b9eb57ee
msgid "Before continuing, close the app. As with Tutorial 1, you can do this by pressing the close button on the application window, by selecting Quit/Exit from the application's menu, or by typing **Ctrl+C** in the terminal where you ran ``briefcase dev``."
msgstr ""
"在继续之前，关闭应用程序。和教程 1 "
"一样，您可以使用应用程序窗口上的关闭按钮、从应用程序的菜单栏选择关闭/退出、"
"或在您运行 ``briefcase dev`` 的命令行窗口中按 **Ctrl+C** 以关闭应用程序。"

#: ../../tutorial/tutorial-2.rst:316 d9d95d995cad48a782fc1461330d67cc
msgid "Next steps"
msgstr "下一步"

#: ../../tutorial/tutorial-2.rst:318 ba0ec44e64454c669fcc71b8c65c9cf0
msgid "We've now got an application that does something a little more interesting. But it only runs on our own computer. Let's package this application for distribution. In :doc:`Tutorial 3 <tutorial-3>`, we'll wrap our application up as a standalone installer that we could send to a friend, a customer, or upload to an App Store."
msgstr "我们现在有了一个做一些更有趣的事情的应用程序，但它只能在我们自己的电脑上运行。让我们将这个应用程序打包，以供分发。在 :doc:`教程3<tutorial-3>` 中，我们将把应用程序打包成一个独立的安装程序，以供发送给朋友、客户，或上传到应用商店。"
