msgid ""
msgstr ""
"Project-Id-Version: BeeWare 0.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-06-20 03:05+0000\n"
"PO-Revision-Date: 2025-07-07 01:01+0000\n"
"Last-Translator: John <johnzhou721@gmail.com>\n"
"Language-Team: Chinese (Simplified Han script) <https://hosted.weblate.org/"
"projects/beeware/tutorial/tutorial-7/zh_Hans/>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Weblate 5.13-dev\n"
"Generated-By: Babel 2.17.0\n"

#: ../../tutorial/tutorial-7.rst:3 c0efd6e2223c47118ab7f50bc1ebe1f9
msgid "Tutorial 7 - Get this (third)-party started"
msgstr "教程 7 - 使用第三方库"

#: ../../tutorial/tutorial-7.rst:5 472fa4561e1440c8b8943696f9a54f53
msgid "So far, the app we've built has only used our own code, plus the code provided by BeeWare. However, in a real-world app, you'll likely want to use a third-party library, downloaded from the Python Package Index (PyPI)."
msgstr "到目前为止，我们构建的应用程序只使用了我们自己的代码和 BeeWare 提供的代码。不过，在实际应用中，您很可能需要使用从 Python 软件包索引（PyPI）下载的第三方库。"

#: ../../tutorial/tutorial-7.rst:9 cead96f6abcd4e80a98319f42fdb0691
msgid "Let's modify our app to include a third-party library."
msgstr "让我们修改应用程序，加入第三方库。"

#: ../../tutorial/tutorial-7.rst:12 09205e98844947a2a37eeb00a34a6610
msgid "Adding a package"
msgstr "添加软件包"

#: ../../tutorial/tutorial-7.rst:14 dc4188b519dd4e0e90c1e23f690410bd
msgid "Let's modify our application to say a little bit more than just \"Hi, there!\"."
msgstr "让我们修改我们的应用程序，使其能够显示比“你好！”更丰富的内容。"

#: ../../tutorial/tutorial-7.rst:16 6c43b52826de46dc8283b99f1ffd7cb8
msgid "To generate some more interesting text for the dialog, we're going to use a library called `Faker <https://faker.readthedocs.io/en/stable/>`__ . Faker is a Python package that generates fake content, including names and text blocks. The names and words in the text block are generated from an arbitrary list of words provided by Faker. We're going to use Faker to construct a fake message, as if someone is responding to the user."
msgstr ""

#: ../../tutorial/tutorial-7.rst:23 fe30468785e14c48ba8d0fdd9bb9fe8e
msgid "We start by adding ``faker`` to our app. Add an import to the top of the ``app.py`` to import ``faker``::"
msgstr "我们开始吧 ``faker`` 添加到我们的应用程序中。在 ``app.py`` 的最上方加入一个导入，用于导入 ``faker``::"

#: ../../tutorial/tutorial-7.rst:28 3ddb8bd6cb7144f39b0121d254a09073
msgid "Then modify the ``say_hello()`` callback so it looks like this::"
msgstr "然后修改 ``say_hello()`` 回调，使其看起来像这样::"

#: ../../tutorial/tutorial-7.rst:39 2034a7fd1eeb48a8bea715e0983b5523
#, fuzzy
msgid "Let's run our updated app in Briefcase developer mode to check that our change has worked."
msgstr "让我们在公文包开发者模式下运行更新后的应用程序，检查我们的更改是否有效。"

#: ../../tutorial/tutorial-7.rst:44 ../../tutorial/tutorial-7.rst:120
#: ../../tutorial/tutorial-7.rst:182 ../../tutorial/tutorial-7.rst:510
#: 7dae5ea8c04e472cb3268fab5a936f3e 8a7e8b7f8b1945679d57343911570db5
#: 8fc1dbc68e8e448492e9144011ea2d8d ebc851d45e334ff8ba808cb9c0203f1a
msgid "macOS"
msgstr "macOS"

#: ../../tutorial/tutorial-7.rst:64 ../../tutorial/tutorial-7.rst:134
#: ../../tutorial/tutorial-7.rst:220 ../../tutorial/tutorial-7.rst:531
#: 3f68199b67fc4f8f9a9931e38d883b98 5b6556276a744bfdb8dc8ab657f4641f
#: 85e90c4cb13c4cb3b6e50700b4f56c5c e7a2ff7dc11e47cda58baacb2241a1d9
msgid "Linux"
msgstr "Linux"

#: ../../tutorial/tutorial-7.rst:84 ../../tutorial/tutorial-7.rst:148
#: ../../tutorial/tutorial-7.rst:273 ../../tutorial/tutorial-7.rst:558
#: 64e3bb28bb78433c86f2807f86f3beca 709caaf512bc46bb8e20ea5f09383472
#: d9a11a39c2ed463bb30d6132e42cd0a9 ed99129dfb184ffe98859c7db4d19da8
msgid "Windows"
msgstr "Windows"

#: ../../tutorial/tutorial-7.rst:104 ../../tutorial/tutorial-7.rst:162
#: ../../tutorial/tutorial-7.rst:311 ../../tutorial/tutorial-7.rst:579
#: 1a0edc00237d4394ae8beaa4df6b486c 46577f537ad1470b85a5f8347a1e680d
#: c2c4c6cf9ff24fd59079a17db893fa0e e5495388c0ac42c783cef2c7af639b7c
msgid "Android"
msgstr "Android"

#: ../../tutorial/tutorial-7.rst:106 ../../tutorial/tutorial-7.rst:164
#: adcafc4f760a408d99e516abbe277acf f586d2763a7346c09f6070226fe200b7
msgid "You can't run an Android app in developer mode - use the instructions for your chosen desktop platform."
msgstr ""

#: ../../tutorial/tutorial-7.rst:109 ../../tutorial/tutorial-7.rst:167
#: ../../tutorial/tutorial-7.rst:384 ../../tutorial/tutorial-7.rst:596
#: 86dca11fa3404268b0161ab399752350 88b11beb12b544ba9f678a53f352f6fe
#: 9daf6fab255f48808586cb9964214894 ea09748bb9b74e91a5f69cd0875688e7
msgid "iOS"
msgstr "iOS"

#: ../../tutorial/tutorial-7.rst:111 ../../tutorial/tutorial-7.rst:169
#: 07e386caeee240fbbae03ea6d78213a4 1427661dd642454dacea01d69a9b1766
msgid "You can't run an iOS app in developer mode - use the instructions for your chosen desktop platform."
msgstr ""

#: ../../tutorial/tutorial-7.rst:114 f6db1525c17d42f2a7543c60bbfd757f
#, fuzzy
msgid "What happened? We've added ``faker`` to our *code*, but we haven't added it to our development virtual environment. We can fix this by installing ``faker`` with ``pip``, and then re-running ``briefcase dev``:"
msgstr "发生了什么？我们已经将 ``httpx`` 添加到我们的代码*中，但我们还没有将它添加到我们的开发虚拟环境中。我们可以用 ``pip`` 安装 ``httpx``，然后重新运行 ``briefcase dev``："

#: ../../tutorial/tutorial-7.rst:127 ../../tutorial/tutorial-7.rst:141
#: ../../tutorial/tutorial-7.rst:155 3ff689a4fa554cbe8132f4985f26d3eb
#: 672a01904be84b3c9e65f81f7fa24234 d0e265865c274199aaa9def468256a39
msgid "When you enter a name and press the button, you should see a dialog that looks something like:"
msgstr "输入名称并按下按钮后，您会看到一个类似如下的对话框："

#: ../../tutorial/tutorial-7.rst:130 99d741deb4664ce1b9d16bb094132529
#, fuzzy
msgid "Hello World Tutorial 7 dialog, on macOS"
msgstr "Hello World 教程 7 对话框，在 macOS 上运行"

#: ../../tutorial/tutorial-7.rst:144 d9a43e3b64df404f9102cc689571065c
msgid "Hello World Tutorial 7 dialog, on Linux"
msgstr "在 Linux 上的 Hello World 教程 7 对话框"

#: ../../tutorial/tutorial-7.rst:158 8d4a4c27bc444b3a8d155d66e1631003
msgid "Hello World Tutorial 7 dialog, on Windows"
msgstr "在 Windows 上的 Hello World 教程 7 对话框"

#: ../../tutorial/tutorial-7.rst:172 ea5dd0fcae9b49959f23bd28fba5b720
#, fuzzy
msgid "We've now got a working app, using a third party library, running in development mode!"
msgstr "现在，我们已经有了一个可正常运行的应用程序，它使用第三方库，以开发模式运行！"

#: ../../tutorial/tutorial-7.rst:175 5460877abe6044f4834d6a1110264ffe
#, fuzzy
msgid "Running the updated app"
msgstr "运行更新后的应用程序"

#: ../../tutorial/tutorial-7.rst:177 db706f24f3f14acea55776d300538c14
#, fuzzy
msgid "Let's get this updated application code packaged as a standalone app. Since we've made code changes, we need to follow the same steps as in :doc:`Tutorial 4 <tutorial-4>`:"
msgstr "让我们将更新后的应用程序代码打包为独立应用程序。由于我们对代码进行了修改，因此需要遵循 :doc:`Tutorial 4<tutorial-4>` 中的相同步骤："

#: ../../tutorial/tutorial-7.rst:184 ../../tutorial/tutorial-7.rst:222
#: ../../tutorial/tutorial-7.rst:275 ../../tutorial/tutorial-7.rst:313
#: ../../tutorial/tutorial-7.rst:386 7013c509dbf14c398c2e4328a19dabb7
#: 807365f81b9c4a06892171e4fbda97b5 9837d695dac94dc59919bcb49c5098cf
#: a81f5fa8e1854d94be9ccff4dbfdf8dd efe037ca8b17489fb5c2fba4005f6e5c
#, fuzzy
msgid "Update the code in the packaged app:"
msgstr "更新打包应用程序中的代码："

#: ../../tutorial/tutorial-7.rst:195 ../../tutorial/tutorial-7.rst:233
#: ../../tutorial/tutorial-7.rst:286 ../../tutorial/tutorial-7.rst:324
#: ../../tutorial/tutorial-7.rst:397 3e50d2ad7b9343bfa5fe1b9d30e69566
#: 6be112856384466b87e9529fc180812e 9fa1aa54ff9147f69d1395aa54a9ddb6
#: b201647956c04b5ba38095664614fd7f d6b434737e08477eb70d40ae14fc99dd
#, fuzzy
msgid "Rebuild the app:"
msgstr "重建应用程序："

#: ../../tutorial/tutorial-7.rst:204 ../../tutorial/tutorial-7.rst:247
#: ../../tutorial/tutorial-7.rst:295 0e61f9866bf74dbabe7821a9a8f1be51
#: a0dda02885e64aa7b9e5a8212bca2cc6 d85824e1dbee476688cc9ba4dbd149cc
#, fuzzy
msgid "And finally, run the app:"
msgstr "最后，运行应用程序："

#: ../../tutorial/tutorial-7.rst:213 ../../tutorial/tutorial-7.rst:304
#: a717aa77f2744aed9ab8a6e97e889275 e0076d766e98444f93acc773c3b0e0c6
#, fuzzy
msgid "However, when the app runs, you'll see an error in the console, plus a crash dialog:"
msgstr "但是，当程序运行时，你会在控制台中看到一个错误，还有一个崩溃对话框："

#: ../../tutorial/tutorial-7.rst:216 778e3a366fa641df81fd69c54afe1038
#, fuzzy
msgid "Hello World Tutorial 7 app crash, on macOS"
msgstr "MacOS 上的 Hello World Tutorial 7 应用程序崩溃"

#: ../../tutorial/tutorial-7.rst:256 ../../tutorial/tutorial-7.rst:343
#: 670da6f45ee14d4ab099eab4ef9d22fa 6fff23e2d8cc40e6a5c4f0c4e4020782
#, fuzzy
msgid "However, when the app runs, you'll see an error in the console:"
msgstr "但是，当应用程序运行时，您会在控制台中看到一个错误："

#: ../../tutorial/tutorial-7.rst:307 8d46265283d543c4af1979f8bd1d6a43
#, fuzzy
msgid "Hello World Tutorial 7 app crash, on Windows"
msgstr "Hello World 教程 7》应用程序崩溃，在 Windows 系统上"

#: ../../tutorial/tutorial-7.rst:334 ../../tutorial/tutorial-7.rst:407
#: d9f2add6a28048a1b742d3419e471f4a ec0ab879017b49fd835ba3c58e1525bd
msgid "And finally, run the app (selecting a simulator when prompted):"
msgstr ""

#: ../../tutorial/tutorial-7.rst:417 e37adecf12b147499b84d6d0a81dcc6e
#, fuzzy
msgid "However, when the app runs, you'll see an error in the console"
msgstr "但是，当应用程序运行时，您会在控制台中看到一个错误："

#: ../../tutorial/tutorial-7.rst:430 2f324c4a01894ed0b721c0c412a9cb4a
#, fuzzy
msgid "Once again, the app has failed to start because ``faker`` has not been installed - but why? Haven't we already installed ``faker``?"
msgstr "应用程序再次启动失败，因为已经安装了 ``httpx`` - 但为什么呢？我们不是已经安装了 ``httpx`` 吗？"

#: ../../tutorial/tutorial-7.rst:433 fb87efada5cd49ef845fd4a5ab1e8db7
#, fuzzy
msgid "We have - but only in the development environment. Your development environment is entirely local to your machine - and is only enabled when you explicitly activate it. Although Briefcase has a development mode, the main reason you'd use Briefcase is to package up your code so you can give it to someone else."
msgstr "我们有，但仅限于开发环境。你的开发环境完全在你的机器本地，只有当你明确激活它时才会启用。虽然公文包有开发模式，但使用公文包的主要原因是打包你的代码，这样你就可以把它交给别人。"

#: ../../tutorial/tutorial-7.rst:438 5172e39e75df4448a4e86bc10c850ae4
#, fuzzy
msgid "The only way to guarantee that someone else will have a Python environment that contains everything it needs is to build a completely isolated Python environment. This means there's a completely isolated Python install, and a completely isolated set of dependencies. This is what Briefcase is building when you run ``briefcase build`` - an isolated Python environment. This also explains why ``faker`` isn't installed - it has been installed in your *development* environment, but not in the packaged app."
msgstr "要保证别人的 Python 环境包含它所需要的一切，唯一的办法就是构建一个完全隔离的 Python 环境。这意味着有一个完全独立的 Python 安装，和一套完全独立的依赖关系。这就是当你运行 ``briefcase build`` 时，Briefcase 正在构建的 - 一个隔离的 Python 环境。这也解释了为什么没有安装 ``httpx`` - 它已经安装在你的开发环境中，但没有安装在打包的应用程序中。"

#: ../../tutorial/tutorial-7.rst:446 4b700f94f1714359932076ce06ba3687
#, fuzzy
msgid "So - we need to tell Briefcase that our app has an external dependency."
msgstr "因此，我们需要告诉 Briefcase，我们的应用程序有一个外部依赖关系。"

#: ../../tutorial/tutorial-7.rst:449 276e4e62ced044f6b62db178aebcd90f
#, fuzzy
msgid "Updating dependencies"
msgstr "更新依赖项"

#: ../../tutorial/tutorial-7.rst:451 6239de13291746109c96df501f58da60
#, fuzzy
msgid "In the root directory of your app, there is a file named ``pyproject.toml``. This file contains all the app configuration details that you provided when you originally ran ``briefcase new``."
msgstr "在应用程序的根目录中，有一个名为 ``pyproject.toml`` 的文件。该文件包含您最初运行 ``briefcase new`` 时提供的所有应用程序配置详细信息。"

#: ../../tutorial/tutorial-7.rst:455 47d6b648eb164a31b547218623300f6d
#, fuzzy
msgid "``pyproject.toml`` is broken up into sections; one of the sections describes the settings for your app::"
msgstr "pyproject.toml \"分为多个部分，其中一部分描述了应用程序的设置：："

#: ../../tutorial/tutorial-7.rst:466 a252902c2f9a4d9fb8f3f3374c0170d4
#, fuzzy
msgid "The ``requires`` option describes the dependencies of our application. It is a list of strings, specifying libraries (and, optionally, versions) of libraries that you want to be included with your app."
msgstr "requires \"选项描述了应用程序的依赖关系。它是一个字符串列表，其中指定了您希望应用程序包含的库（以及可选的版本）。"

#: ../../tutorial/tutorial-7.rst:470 5e27f6177930468a8446e66b7f1b929f
#, fuzzy
msgid "Modify the ``requires`` setting so that it reads::"
msgstr "修改 ``requires`` 设置为：："

#: ../../tutorial/tutorial-7.rst:476 df60ab672c2945b68fb40a3a348e1fdb
#, fuzzy
msgid "By adding this setting, we're telling Briefcase \"when you build my app, run ``pip install faker`` into the application bundle\". Anything that would be legal input to ``pip install`` can be used here - so, you could specify:"
msgstr "通过添加此设置，我们告诉 Briefcase \"当你构建我的应用程序时，运行 ``pip install httpx`` 到应用程序捆绑包中\"。任何可以合法输入到 ``pip install`` 的内容都可以在这里使用--因此，你可以指定："

#: ../../tutorial/tutorial-7.rst:480 d905b501f787437eacde6644361c0728
#, fuzzy
msgid "A specific library version (e.g., ``\"faker==37.3.0\"``);"
msgstr "特定的库版本（例如， ``\"httpx===0.19.0\"`` ）;"

#: ../../tutorial/tutorial-7.rst:481 22ce0f530606436f9f42e7f9b09380ba
#, fuzzy
msgid "A range of library versions (e.g., ``\"faker>=37\"``);"
msgstr "一系列库版本（例如， ``\"httpx>=0.19\"`` ）;"

#: ../../tutorial/tutorial-7.rst:482 d6a1f10d8d634ece9f6ea69e91bdc335
#, fuzzy
msgid "A path to a git repository (e.g., ``\"git+https://github.com/joke2k/faker/\"``); or"
msgstr "指向 git 仓库的路径（例如，``\"git+https://github.com/encode/httpx\"``）；或"

#: ../../tutorial/tutorial-7.rst:484 6cecaaecf99e42308c77b334abca2429
msgid "A local file path (However - be warned: if you give your code to someone else, this path probably won't exist on their machine!)"
msgstr "本地文件路径（不过需要注意的是：如果你把代码交给别人，这个路径很可能不存在于他们的机器上！）"

#: ../../tutorial/tutorial-7.rst:487 16fa028aec224fdeae417206060732c3
#, fuzzy
msgid "Further down in ``pyproject.toml``, you'll notice other sections that are operating system dependent, like ``[tool.briefcase.app.helloworld.macOS]`` and ``[tool.briefcase.app.helloworld.windows]``. These sections *also* have a ``requires`` setting. These settings allow you to define additional platform-specific dependencies - so, for example, if you need a platform-specific library to handle some aspect of your app, you can specify that library in the platform-specific ``requires`` section, and that setting will only be used for that platform. You will notice that the ``toga`` libraries are all specified in the platform-specific ``requires`` section - this is because the libraries needed to display a user interface are platform specific."
msgstr "在 ``pyproject.toml`` 中的更下面部分，你会注意到与操作系统相关的其他部分，如 ``[tool.briefcase.app.helloworld.macOS]`` 和 ``[tool.briefcase.app.helloworld.windows]``。这些部分**也有一个 ``requires`` 设置。这些设置允许你定义额外的特定平台依赖关系，例如，如果你需要一个特定平台的库来处理应用程序的某些方面，你可以在特定平台的 ``requires`` 部分中指定该库，而该设置将仅用于该平台。你会注意到，所有的 ``toga`` 库都是在特定平台的 ``requires`` 部分中指定的，这是因为显示用户界面所需的库都是特定平台的。"

#: ../../tutorial/tutorial-7.rst:498 72c98c1bd8c94d9282fff5c2f44dc0a8
#, fuzzy
msgid "In our case, we want ``faker`` to be installed on all platforms, so we use the app-level ``requires`` setting. The app-level dependencies will always be installed; the platform-specific dependencies are installed *in addition* to the app-level ones."
msgstr "在我们的例子中，我们希望 ``httpx`` 安装在所有平台上，因此使用了应用程序级的 ``requires`` 设置。应用程序级的依赖项始终会被安装；特定平台的依赖项会在应用程序级的依赖项之外*安装。"

#: ../../tutorial/tutorial-7.rst:503 a8e67eb88ee04c0aaf84bb4211b60001
#, fuzzy
msgid "Now that we've told Briefcase about our additional requirements, we can try packaging our app again. Ensure that you've saved your changes to ``pyproject.toml``, and then update your app again - this time, passing in the ``-r`` flag. This tells Briefcase to update requirements in the packaged app:"
msgstr "既然我们已经告诉了 Briefcase 我们的额外需求，那么我们就可以再次尝试打包应用程序了。确保已将更改保存到 ``pyproject.toml``，然后再次更新应用程序--这一次，传递 ``-r`` 标志。这将告诉 Briefcase 更新打包应用程序中的需求："

#: ../../tutorial/tutorial-7.rst:618 53dd1d14388a4b14aabb32571881b24e
#, fuzzy
msgid "Once you've updated, you can run ``briefcase build`` and ``briefcase run`` - and you should see your packaged app, with the new dialog behavior."
msgstr "更新完成后，您可以运行 ``briefcase build`` 和 ``briefcase run`` - 您应该会看到打包后的应用程序，并带有新的对话框行为。"

#: ../../tutorial/tutorial-7.rst:623 212ecdb25e7f44bfafcccfad3278b595
#, fuzzy
msgid "The ``-r`` option for updating requirements is also honored by the ``build`` and ``run`` command, so if you want to update, build, and run in one step, you could use ``briefcase run -u -r``."
msgstr "用于更新需求的 ``-r`` 选项也会被 ``build` 和 ``run` 命令接受，因此如果你想一步完成更新、编译和运行，可以使用 ``briefcase run -u -r``。"

#: ../../tutorial/tutorial-7.rst:628 82cc25257ce64cdca51f7004bca9ad26
msgid "Third-Party Python Packages for Mobile and Web"
msgstr ""

#: ../../tutorial/tutorial-7.rst:630 d5316114365040f186e92d31241ce51d
msgid "Faker is just one example of a third-party Python package - a collection of code that isn't part what Python provides out of the box. These third-party packages are most commonly distributed using the `Python Package Index (PyPI) <https://pypi.org>`__, and installed into your local virtual environment. We've been using ``pip`` in this tutorial, but there are other options."
msgstr ""

#: ../../tutorial/tutorial-7.rst:636 c7390312cc7e4283b3c4fdd7c0fd2b1e
#, fuzzy
msgid "On desktop platforms (macOS, Windows, Linux), essentially any package on PyPI package can be installed into your virtual environment, or added to your app's requirements. However, when building an app for mobile or web platforms, `your options are slightly limited <https://briefcase.beeware.org/en/latest/about/faq.html#can-i-use-third-party-python-packages-in-my-app>`__."
msgstr "在桌面平台（macOS、Windows、Linux）上，任何可安装的 \"pip \"都可以添加到您的需求中。在移动和网络平台上，\"您的选择略显有限 <https://briefcase.readthedocs.io/en/latest/background/faq.html#can-i-use-third-party-python-packages-in-my-app>`__。"

#: ../../tutorial/tutorial-7.rst:642 664dfce986f0485ca7eca4f9faf582a6
msgid "In short; any *pure Python* package (i.e. any package created from a project written *only* in Python) can be used without difficulty. Some packages, though, are created from projects that contain both Python and other languages (e.g. C, C++, Rust, etc). Code written in those languages needs to be compiled to platform-specific binary modules before it can be used, and those pre-compiled binary modules are only available on specific platforms. Mobile and web platforms have very different requirements than \"standard\" desktop platforms. At this time, most Python packages don't provide pre-compiled binaries for mobile and web platforms."
msgstr ""

#: ../../tutorial/tutorial-7.rst:652 354416bc40b2413db2c9a8eaf1631a1a
msgid "On PyPI, packages are often provided in a pre-built distribution format called *wheels*. To check whether a package is pure Python, look at the PyPI downloads page for the project. If the wheels provided have a ``-py3-none-any.whl`` suffix (e.g., `Faker <https://pypi.org/project/Faker/37.3.0/#files>`__), then they are pure Python wheels. However, if the wheels have version and platform-specific extensions (e.g., `Pillow <https://pypi.org/project/pillow/11.2.1/#files>`__, which has wheels with suffixes like ``-cp313-cp313-macosx_11_0_arm64.whl`` and ``-cp39-cp39-win_amd64.whl``), then the wheel *contains a binary component*. That package cannot be installed on mobile or web platforms unless a wheel compatible with those platforms has been provided."
msgstr ""

#: ../../tutorial/tutorial-7.rst:663 c5f2d43782ff42209897812761170c9d
msgid "At this time, *most* binary packages on PyPI don't provide mobile- or web-compatible wheels. To fill this gap, BeeWare provides binaries for some popular binary modules (including ``numpy``, ``pandas``, and ``cryptography``). These wheels are *not* distributed on PyPI, but Briefcase will install those wheels if they're available."
msgstr ""

#: ../../tutorial/tutorial-7.rst:669 e7bb35e7d20f4070b8ab1240b0eb5bb7
msgid "It's *usually* possible to compile binary packages for mobile platforms, but it's not easy to set up -- well outside the scope of an introductory tutorial like this one."
msgstr "*通常*\\ "
"可以为移动平台编译二进制软件包，但是不容易设置，且远超出了本教程这样的"

#: ../../tutorial/tutorial-7.rst:674 8a7f7a9286f24bd885b5bd817922e866
msgid "Next steps"
msgstr "下一步"

#: ../../tutorial/tutorial-7.rst:676 86a6c33a637747cba0140da79aa603cf
msgid "We've now got an app that uses a third-party library! In :doc:`Tutorial 8 <tutorial-8>` we'll learn how to ensure our app remains responsive as we add more complex application logic."
msgstr ""

#~ msgid "Accessing an API"
#~ msgstr "访问应用程序接口"

#~ msgid "A common task an app will need to perform is to make a request on a web API to retrieve data, and display that data to the user. This is a toy app, so we don't have a *real* API to work with, so we'll use the `{JSON} Placeholder API <https://jsonplaceholder.typicode.com>`__ as a source of data."
#~ msgstr "应用程序需要执行的一项常见任务是向网络应用程序接口发出请求以获取数据，并将数据显示给用户。这是一个玩具应用程序，因此我们没有\\ *真正*\\ 的 API 可供使用，所以我们将使用 `{JSON} 占位符 API <https://jsonplaceholder.typicode.com>`__ 作为数据源。"

#~ msgid "The {JSON} Placeholder API has a number of \"fake\" API endpoints you can use as test data. One of those APIs is the ``/posts/`` endpoint, which returns fake blog posts. If you open ``https://jsonplaceholder.typicode.com/posts/42`` in your browser, you'll get a JSON payload describing a single post - some `Lorum ipsum <https://en.wikipedia.org/wiki/Lorem_ipsum>`__ content for a blog post with ID 42."
#~ msgstr "{JSON} 占位符 API 有许多 \"伪造 \"的 API 端点，您可以将其用作测试数据。其中一个 API 是 ``/posts/`` 端点，它会返回虚假的博客文章。如果在浏览器中打开 ``https://jsonplaceholder.typicode.com/posts/42`` ，就会得到一个描述单篇博文的 JSON 有效载荷--ID 为 42 的博文的一些 `Lorum ipsum <https://en.wikipedia.org/wiki/Lorem_ipsum>`__ 内容。"

#~ msgid "The Python standard library contains all the tools you'd need to access an API. However, the built-in APIs are very low level. They are good implementations of the HTTP protocol - but they require the user to manage lots of low-level details, like URL redirection, sessions, authentication, and payload encoding. As a \"normal browser user\" you're probably used to taking these details for granted, as a browser manages these details for you."
#~ msgstr "Python 标准库包含访问 API 所需的所有工具。然而，内置的 API 是非常低级的。它们很好地实现了 HTTP 协议，但需要用户管理大量低级细节，如 URL 重定向、会话、身份验证和有效负载编码。作为一名 \"普通浏览器用户\"，你可能已经习惯了将这些细节视为理所当然，因为浏览器会为你管理这些细节。"

#~ msgid "As a result, people have developed third-party libraries that wrap the built-in APIs and provide a simpler API that is a closer match for the everyday browser experience. We're going to use one of those libraries to access the {JSON} Placeholder API - a library called `httpx <https://www.python-httpx.org>`__."
#~ msgstr "因此，人们开发了第三方库来封装内置的 API，并提供更简单的 API，使其更符合日常的浏览器体验。我们将使用其中一个库来访问 {JSON} 占位符 API - 一个名为 `httpx <https://www.python-httpx.org>`__ 的库。"

#~ msgid "This will change the ``say_hello()`` callback so that when it is invoked, it will:"
#~ msgstr "这将更改 ``say_hello()`` 回调，使它在被调用时，会:"

#~ msgid "make a GET request on the JSON placeholder API to obtain post 42;"
#~ msgstr "在 JSON 占位符 API 上发出 GET 请求，以获取post42;"

#~ msgid "decode the response as JSON;"
#~ msgstr "将响应解码为 JSON 格式;"

#~ msgid "extract the body of the post; and"
#~ msgstr "提取帖子正文；以及"

#~ msgid "include the body of that post as the text of the dialog."
#~ msgstr "将该帖子的正文作为对话框的文本。"

#~ msgid "Some binary packages may not be available"
#~ msgstr "某些二进制软件包可能不可用"

#~ msgid "In short; any *pure Python* package (i.e., packages that do *not* contain a binary module) can be used without difficulty. However, if your dependency contains a binary component, it must be compiled; at this time, most Python packages don't provide compilation support for non-desktop platforms."
#~ msgstr "简而言之，任何*纯 Python* 包（即*不包含二进制模块的包）都可以毫无困难地使用。但是，如果您的依赖包包含二进制组件，则必须对其进行编译；目前，大多数 Python 包都不支持非桌面平台的编译。"

#~ msgid "We've now got an app that uses a third-party library! However, you may have noticed that when you press the button, the app becomes a little unresponsive. Can we do anything to fix this? Turn to :doc:`Tutorial 8 <tutorial-8>` to find out..."
#~ msgstr "我们现在有了一个使用第三方库的应用程序！不过，您可能已经注意到，当您按下按钮时，应用程序会变得有点反应迟钝。我们能解决这个问题吗？请访问 :doc:`Tutorial 8<tutorial-8>` 了解详情..."
