msgid ""
msgstr ""
"Project-Id-Version: BeeWare 0.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-06-20 03:05+0000\n"
"PO-Revision-Date: 2025-07-04 18:01+0000\n"
"Last-Translator: John <johnzhou721@gmail.com>\n"
"Language-Team: Chinese (Simplified Han script) <https://hosted.weblate.org/"
"projects/beeware/tutorial/tutorial-8/zh_Hans/>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Weblate 5.13-dev\n"
"Generated-By: Babel 2.17.0\n"

#: ../../tutorial/tutorial-8.rst:3 b1689e63416f4e61aba215b32db4991e
msgid "Tutorial 8 - Making it Smooooth"
msgstr "教程 8 - 使其光滑"

#: ../../tutorial/tutorial-8.rst:5 60ce8689055e4505b9dfff38a93aedb0
msgid "So far, our application has been relatively simple - displaying GUI widgets, calling a simple third-party library, and displaying output in a dialog. All these operations happen very quickly, and our application remains responsive."
msgstr ""
"到目前为止，我们的应用程序相对简单——显示图形用户界面小组件、调用一个简单的第"
"三方库，以及在对话框中显示输出。所有这些操作都非常迅速，我们的应用程序始终保"
"持响应。"

#: ../../tutorial/tutorial-8.rst:9 def48992065e45a9a6c9c713af3bdeb9
msgid "However, in a real world application, we'll need to perform complex tasks or calculations that may take a while to complete - and as those tasks are performed, we want our application to remain responsive. Let's make a change to our application that might take a little time to complete, and see the changes that need to be made to accommodate that behavior."
msgstr ""
"但是，在实际的应用中，我们将需要进行会需要一会儿才能完成的复杂任务。当这些任"
"务进行时，我们想让我们的应用保持响应。让我们更改我们的应用程序，添加一个需要"
"一些时间才能完成的任务，并看看需要怎样更改应用程序，适应这个新的行为。"

#: ../../tutorial/tutorial-8.rst:16 59ff29e32c51447cb20994c95cfa3358
msgid "Accessing an API"
msgstr "访问 API"

#: ../../tutorial/tutorial-8.rst:18 6be29a72db2a479eb50033faedb95d58
msgid "A common time-consuming task an app will need to perform is to make a request on a web API to retrieve data, and display that data to the user. Web APIs sometimes take a second or two to respond, so if we're calling an API like that, we need to ensure our application doesn't become unresponsive while we wait for the web API to return an answer."
msgstr ""

#: ../../tutorial/tutorial-8.rst:24 acb20408415546809557dfd20d2d8170
#, python-brace-format
msgid "This is a toy app, so we don't have a *real* API to work with, so we'll use the `{JSON} Placeholder API <https://jsonplaceholder.typicode.com>`__ as a source of data. The {JSON} Placeholder API has a number of \"fake\" API endpoints you can use as test data. One of those APIs is the ``/posts/`` endpoint, which returns fake blog posts. If you open ``https://jsonplaceholder.typicode.com/posts/42`` in your browser, you'll get a JSON payload describing a single post - some `Lorum ipsum <https://en.wikipedia.org/wiki/Lorem_ipsum>`__ content for a blog post with ID 42."
msgstr ""

#: ../../tutorial/tutorial-8.rst:33 07fb48b1c1634b7fb3632c18296abdd0
msgid "The Python standard library contains all the tools you'd need to access an API. However, the built-in APIs are very low level. They are good implementations of the HTTP protocol - but they require the user to manage lots of low-level details, like URL redirection, sessions, authentication, and payload encoding. As a \"normal browser user\" you're probably used to taking these details for granted, as a browser manages them for you."
msgstr ""

#: ../../tutorial/tutorial-8.rst:40 dbfddab06194490daaaa0ad1436de616
#, python-brace-format
msgid "As a result, people have developed third-party libraries that wrap the built-in APIs and provide a simpler API that is a closer match for the everyday browser experience. We're going to use one of those libraries to access the {JSON} Placeholder API - a library called `httpx <https://www.python-httpx.org>`__. Briefcase uses ``httpx`` internally, so it's already in your local environment - you don't need to install it separately to use it here."
msgstr ""

#: ../../tutorial/tutorial-8.rst:47 25c51cbce676490cb25c4bda2089e742
msgid "Let's add a ``httpx`` API call to our app. Modify the ``requires`` setting in our ``pyproject.toml`` to include the new requirement::"
msgstr ""

#: ../../tutorial/tutorial-8.rst:55 306ea0473ef7497383041187fff0746f
msgid "Add an import to the top of the ``app.py`` to import ``httpx``::"
msgstr ""

#: ../../tutorial/tutorial-8.rst:59 bd9eb23b362140ad980523b5320086b4
msgid "Then modify the ``say_hello()`` callback so it looks like this::"
msgstr "然后修改 ``say_hello()`` 回调，使其看起来像这样::"

#: ../../tutorial/tutorial-8.rst:75 675e0aac0a6745559e106be7c4622700
msgid "This will change the ``say_hello()`` callback so that when it is invoked, it will:"
msgstr ""

#: ../../tutorial/tutorial-8.rst:78 2107978ba74849eb9389462a501f068c
msgid "make a GET request on the JSON placeholder API to obtain post 42;"
msgstr ""

#: ../../tutorial/tutorial-8.rst:80 b930d3d8878b41399d43954b5e7ed903
msgid "decode the response as JSON;"
msgstr ""

#: ../../tutorial/tutorial-8.rst:82 afd6c0ecb21746eeb945317ae5e8b133
msgid "extract the body of the post; and"
msgstr ""

#: ../../tutorial/tutorial-8.rst:84 4dd031c454e2476aa14332117709ebc8
msgid "include the body of that post as the text of the \"message\" dialog, in place of the text generated by Faker."
msgstr ""

#: ../../tutorial/tutorial-8.rst:87 9255123df77543aa90f0abd0425b7f49
msgid "Lets run our updated app in Briefcase developer mode to check that our change has worked. As we've added a new requirement, we need to tell developer mode to reinstall requirements, by using the ``-r`` argument:"
msgstr ""

#: ../../tutorial/tutorial-8.rst:93 ../../tutorial/tutorial-8.rst:310
#: 92d8d712264c45dcacf2bcac9896ab2e e3d4f6fd73bf407aac498d868ce3a436
msgid "macOS"
msgstr "macOS"

#: ../../tutorial/tutorial-8.rst:104 ../../tutorial/tutorial-8.rst:122
#: ../../tutorial/tutorial-8.rst:140 5eef7785507445d9980e574ccab4c603
#: c410861bd98a4dd7b4593ac595d2daa9 ccc2e56770cc4e8f874df9f6ac9d0a77
msgid "When you enter a name and press the button, you should see a dialog that looks something like:"
msgstr "输入名称并按下按钮后，您会看到一个类似如下的对话框："

#: ../../tutorial/tutorial-8.rst:107 dcb064381dc4437a8443100c0deb897f
msgid "Hello World Tutorial 8 dialog, on macOS"
msgstr ""

#: ../../tutorial/tutorial-8.rst:111 ../../tutorial/tutorial-8.rst:316
#: 1b5916775bd242d5a02cbb9b7e7261b2 fc842257ea5d45ab8e3869bfd9b87546
msgid "Linux"
msgstr "Linux"

#: ../../tutorial/tutorial-8.rst:125 69c3b2f011b644c3a1c1c0ef94579a39
msgid "Hello World Tutorial 8 dialog, on Linux"
msgstr ""

#: ../../tutorial/tutorial-8.rst:129 ../../tutorial/tutorial-8.rst:322
#: 017bc657a82b4e86b64b843b51bbe300 237f577be73d4d5bb8448fb2ef0fe215
msgid "Windows"
msgstr "Windows"

#: ../../tutorial/tutorial-8.rst:143 fa70419b9c4046f591c2f5e8b5c00247
msgid "Hello World Tutorial 8 dialog, on Windows"
msgstr ""

#: ../../tutorial/tutorial-8.rst:147 ../../tutorial/tutorial-8.rst:328
#: 1074fc6286a24443924459f92b8b071a dddf0236eda34f348f49cc98b22c410e
msgid "Android"
msgstr "Android"

#: ../../tutorial/tutorial-8.rst:149 b8a27fbd65d943759756fe4c99527e9e
msgid "You can't run an Android app in developer mode - use the instructions for your chosen desktop platform."
msgstr ""

#: ../../tutorial/tutorial-8.rst:152 ../../tutorial/tutorial-8.rst:334
#: ac0d0263849c4df0ad0f8049723abaa5 ce4f41f74cd34d25a591bed5384c3f41
msgid "iOS"
msgstr "iOS"

#: ../../tutorial/tutorial-8.rst:154 f28ead41cadd4430986981fd5fecf1b5
msgid "You can't run an iOS app in developer mode - use the instructions for your chosen desktop platform."
msgstr ""

#: ../../tutorial/tutorial-8.rst:157 992bc85c93da4d71af5b6c9bc726dcc0
msgid "Unless you've got a *really* fast internet connection, you may notice that when you press the button, the GUI for your app locks up for a little bit. The operating system may even manifest this with a \"beachball\" or \"spinner\" cursor to indicate that the app is being unresponsive."
msgstr ""

#: ../../tutorial/tutorial-8.rst:162 ae2274cecc81449685c43df15b609d1d
#, fuzzy
msgid "This is because the web request we have made is *synchronous*. When our application makes the web request, it waits for the API to return a response before continuing. While it's waiting, it *isn't* allowing the application to redraw - and as a result, the application locks up."
msgstr "除非您的网络连接速度\\ *非常*\\ 快，否则您可能会注意到，当您按下按钮时，应用程序的图形用户界面会锁定一会儿。这是因为我们发出的网络请求是\\ *同步*\\ 的。当我们的应用程序发出网络请求时，它会等待应用程序接口返回响应，然后再继续。在等待的过程中，应用程序\\ *不*\\ 允许重新绘制，结果导致应用程序锁定。"

#: ../../tutorial/tutorial-8.rst:168 32a6046e79f146da8c56afb8c4d7edfe
msgid "GUI Event Loops"
msgstr "图形用户界面事件循环"

#: ../../tutorial/tutorial-8.rst:170 da5e5c447d7549a49c4e0dc98877d0c0
msgid "To understand why this happens, we need to dig into the details of how a GUI application works. The specifics vary depending on the platform; but the high level concepts are the same, no matter the platform or GUI environment you're using."
msgstr "要理解为什么会出现这种情况，我们需要深入了解图形用户界面应用程序的工作原理。具体细节因平台而异，但无论使用何种平台或图形用户界面环境，高层概念都是相同的。"

#: ../../tutorial/tutorial-8.rst:175 649d74f3ab094b148c545acc45ce2ad0
msgid "A GUI app is, fundamentally, a single loop that looks something like::"
msgstr "从根本上说，图形用户界面应用程序就是一个单一的循环，看起来就像::"

#: ../../tutorial/tutorial-8.rst:181 a26526f3f9084ed1a78ccf47800fd9a6
#, fuzzy
msgid "This loop is called the *Event Loop*. (These aren't actual method names - it's an illustration of what is going on using \"pseudo-code\")."
msgstr "这个循环被称为 *事件循环*。(这些并不是实际的方法名称，而是 \"伪代码 \"的说明）。"

#: ../../tutorial/tutorial-8.rst:184 5eb87c1e833e47d0922daf24845fbcc0
#, fuzzy
msgid "When you click on a button, or drag a scroll bar, or type a key, you are generating an \"event\". That \"event\" is put onto a queue, and the app will process the queue of events when it next has the opportunity to do so. The user code that is triggered in response to the event is called an *event handler*. These event handlers are invoked as part of the ``process_events()`` call."
msgstr "当你点击一个按钮、拖动一个滚动条或输入一个键时，你就产生了一个 \"事件\"。该 \"事件 \"被放入一个队列，应用程序将在下一次有机会时处理队列中的事件。为响应事件而触发的用户代码称为*事件处理程序*。这些事件处理程序作为``process_events()``调用的一部分被调用。"

#: ../../tutorial/tutorial-8.rst:190 0598acbc43aa430baa2be0bca1f07478
msgid "Once an app has processed all the available events, it will ``redraw()`` the GUI. This takes into account any changes that the events have caused to the display of the app, as well as anything else that is going on in the operating system - for example, the windows of another app may obscure or reveal part of our app's window, and our app's redraw will need to reflect the portion of the window that is currently visible."
msgstr "应用程序处理完所有可用事件后，就会 重绘 （``redraw()``）图形用户界面。这将考虑到事件对应用程序显示所造成的任何变化，以及操作系统中发生的任何其他情况，例如，其他应用程序的窗口可能会遮挡或显示我们应用程序的部分窗口，而我们应用程序的重绘将需要反映当前可见的窗口部分。"

#: ../../tutorial/tutorial-8.rst:197 d5e43398c67e47ca95973dcf31635b89
#, fuzzy
msgid "The important detail to notice: while an application is processing an event, *it can't redraw*, and *it can't process other events*."
msgstr "需要注意的重要细节是：当应用程序在处理事件时，*不能重绘*，*也不能处理其他事件*。"

#: ../../tutorial/tutorial-8.rst:200 215351528a334ac09cb30653fb52cf51
#, fuzzy
msgid "This means any user logic contained in an event handler needs to complete quickly. Any delay in completing the event handler will be observed by the user as a slowdown (or stop) in GUI updates. If this delay is long enough, your operating system may report this as a problem - the macOS \"beachball\" and Windows \"spinner\" icons are the operating system telling you that your app is taking too long in an event handler."
msgstr "这意味着事件处理程序中包含的任何用户逻辑都需要快速完成。完成事件处理程序的任何延迟都会被用户观察到，表现为图形用户界面更新的减慢（或停止）。如果延迟时间足够长，操作系统可能会将此报告为问题--macOS 的 \"沙滩球 \"和 Windows 的 \"旋转器 \"图标就是操作系统在告诉你，你的应用程序在事件处理程序中耗时过长。"

#: ../../tutorial/tutorial-8.rst:207 55768f2f769b4be7a98c2614da04383d
#, fuzzy
msgid "Simple operations like \"update a label\", or \"recompute the total of the inputs\" are easy to complete quickly. However, there are a lot of operations that can't be completed quickly. If you're performing a complex mathematical calculation, or indexing all the files on a file system, or performing a large network request, you can't \"just do it quickly\" - the operations are inherently slow."
msgstr "像 \"更新标签 \"或 \"重新计算输入总和 \"这样的简单操作很容易快速完成。然而，有很多操作是无法快速完成的。如果要执行复杂的数学计算，或为文件系统中的所有文件编制索引，或执行大型网络请求，就不能 \"快速完成\"--这些操作本身就很慢。"

#: ../../tutorial/tutorial-8.rst:213 48ce23e413434446bdb68a1c25e898d7
#, fuzzy
msgid "So - how do we perform long-lived operations in a GUI application?"
msgstr "那么，我们如何在图形用户界面应用程序中执行长期操作呢？"

#: ../../tutorial/tutorial-8.rst:216 54b6c42eb4344624961744f197e9a69d
#, fuzzy
msgid "Asynchronous programming"
msgstr "异步编程"

#: ../../tutorial/tutorial-8.rst:218 ca6642c60bf444eea2ad6c3354ef2f9a
#, fuzzy
msgid "What we need is a way to tell an app in the middle of a long-lived event handler that it is OK to temporarily release control back to the event loop, as long as we can resume where we left off. It's up to the app to determine when this release can occur; but if the app releases control to the event loop regularly, we can have a long-running event handler *and* maintain a responsive UI."
msgstr "我们需要的是一种方法，让处于长期事件处理程序中间的应用程序知道，只要我们能从上次中断的地方继续运行，就可以暂时将控制权释放回事件循环。应用程序可以自行决定何时释放控制权；但如果应用程序定期向事件循环释放控制权，我们就可以拥有一个长期运行的事件处理程序，并**保持响应式用户界面。"

#: ../../tutorial/tutorial-8.rst:224 879ec0f793ee44f2a5fbac2f0f640ae7
#, fuzzy
msgid "We can do this by using *asynchronous programming*. Asynchronous programming is a way to describe a program that allows the interpreter to run multiple functions at the same time, sharing resources between all the concurrently running functions."
msgstr "我们可以通过使用*异步编程*来实现这一点。异步编程是一种描述程序的方法，它允许解释器同时运行多个函数，在所有并发运行的函数之间共享资源。"

#: ../../tutorial/tutorial-8.rst:229 dd2b6b9c34c54363a7cef2061b18c25d
#, fuzzy
msgid "Asynchronous functions (known as *coroutines*) need to be explicitly declared as being asynchronous. They also need to internally declare when an opportunity exists to change context to another coroutine."
msgstr "异步函数（称为 * 协同例程*）需要明确声明为异步函数。它们还需要在内部声明何时有机会将上下文切换到另一个共同例程。"

#: ../../tutorial/tutorial-8.rst:233 9192c46ab94f4b09835fe97882b28b39
#, fuzzy
msgid "In Python, asynchronous programming is implemented using the ``async`` and ``await`` keywords, and the `asyncio <https://docs.python.org/3/library/asyncio.html>`__ module in the standard library. The ``async`` keyword allows us to declare that a function is an asynchronous coroutine. The ``await`` keyword provides a way to declare when an opportunity exists to change context to another coroutine. The `asyncio <https://docs.python.org/3/library/asyncio.html>`__ module provides some other useful tools and primitives for asynchronous coding."
msgstr "在 Python 中，异步编程是通过 ``async`` 和 ``await`` 关键字以及标准库中的 `asyncio <https://docs.python.org/3/library/asyncio.html>`__ 模块来实现的。`async`` 关键字允许我们声明一个函数是异步协程。关键字 ``await`` 提供了一种方法来声明何时有机会将上下文切换到另一个协程。`asyncio <https://docs.python.org/3/library/asyncio.html>`__ 模块为异步编码提供了一些其他有用的工具和原语。"

#: ../../tutorial/tutorial-8.rst:243 09cc348938124a0495127c9540e0d92d
#, fuzzy
msgid "Making the tutorial asynchronous"
msgstr "使教程异步化"

#: ../../tutorial/tutorial-8.rst:245 820912ce71fc4acab1ee42d147106be2
#, fuzzy
msgid "To make our tutorial asynchronous, modify the ``say_hello()`` event handler so it looks like this::"
msgstr "为了使我们的教程成为异步教程，请修改事件处理程序 \"say_hello()\"，使其看起来像这样：："

#: ../../tutorial/tutorial-8.rst:261 561314bc6ca04a7ba8f86033a11d8245
#, fuzzy
msgid "There are only three changes to this callback from the previous version:"
msgstr "与上一版本相比，该代码只有 4 处改动："

#: ../../tutorial/tutorial-8.rst:263 2048ec089260457290faa7c806994e9d
#, fuzzy
msgid "The client that is created is an asynchronous ``AsyncClient()``, rather than a synchronous ``Client()``. This tells ``httpx`` that it should operate in asynchronous mode, rather than synchronous mode."
msgstr "创建的客户端是异步的 ``AsyncClient()`` 而不是同步的 ``Client()`。这就告诉 ``httpx`` 应在异步模式而非同步模式下运行。"

#: ../../tutorial/tutorial-8.rst:267 da621a721afb4a989c530282c33fe74d
#, fuzzy
msgid "The context manager used to create the client is marked as ``async``. This tells Python that there is an opportunity to release control as the context manager is entered and exited."
msgstr "用于创建客户端的上下文管理器被标记为 ``async``。这就告诉 Python，当上下文管理器进入和退出时，有机会释放控制。"

#: ../../tutorial/tutorial-8.rst:271 f0ba3407525041a58f14c1fc6a97d338
msgid "The ``get`` call is made with an ``await`` keyword. This instructs the app that while we are waiting for the response from the network, the app can release control to the event loop. We've seen this keyword before - we also use ``await`` when displaying the dialog box. The reason for that usage is the same as it is for the HTTP request - we need to tell the app that while the dialog is displayed, and we're waiting for the user to push a button, it's OK to release control back to the event loop."
msgstr ""

#: ../../tutorial/tutorial-8.rst:279 d930d079b1ff4bdb82f3adc20ccab7c7
msgid "It's also important to note that the handler itself is defined as ``async def``, rather than just ``def``. This tells Python that the method is an asynchronous coroutine. We made this change back in Tutorial 3 when we added the dialog box. You can only use ``await`` statements inside a method that is declared as ``async def``."
msgstr ""

#: ../../tutorial/tutorial-8.rst:285 24853d0b034649bdbaa43fd92f431b32
#, fuzzy
msgid "Toga allows you to use regular methods or asynchronous coroutines as handlers; Toga manages everything behind the scenes to make sure the handler is invoked or awaited as required."
msgstr "Toga 允许你使用常规方法或异步协程作为处理程序；Toga 在幕后管理一切，确保处理程序按要求被调用或等待。"

#: ../../tutorial/tutorial-8.rst:289 16e2a6d52bb8463c900fd48bf7f19c28
#, fuzzy
msgid "If you save these changes and re-run the app in development mode, there won't be any obvious changes to the app. However, when you click on the button to trigger the dialog, you may notice a number of subtle improvements:"
msgstr "如果保存这些更改并重新运行应用程序（在开发模式下使用 ``briefcase dev`` 或更新并重新运行打包的应用程序），应用程序不会有任何明显的变化。不过，当您点击按钮触发对话框时，您可能会注意到一些细微的改进："

#: ../../tutorial/tutorial-8.rst:293 ad1412e1f2cd4451a03a25d6c4a71118
#, fuzzy
msgid "The button returns to an \"unclicked\" state, rather than being stuck in a \"clicked\" state."
msgstr "按钮会返回到 \"未点击 \"状态，而不是停留在 \"已点击 \"状态。"

#: ../../tutorial/tutorial-8.rst:296 b8cee435abe04d72a2065a0c1e110514
#, fuzzy
msgid "The \"beachball\"/\"spinner\" icon won't appear"
msgstr "沙滩球\"/\"旋转器 \"图标不会出现"

#: ../../tutorial/tutorial-8.rst:298 67b2e8d563954bb7b7f616a2a7493abe
#, fuzzy
msgid "If you move/resize the app window while waiting for the dialog to appear, the window will redraw."
msgstr "如果在等待对话框出现时移动/调整应用程序窗口的大小，窗口将重新绘制。"

#: ../../tutorial/tutorial-8.rst:301 aa0d3bd64f7a43929fdbe22b49089e78
#, fuzzy
msgid "If you try to open an app menu, the menu will appear immediately."
msgstr "如果尝试打开应用程序菜单，菜单会立即出现。"

#: ../../tutorial/tutorial-8.rst:303 abe7fda6d34e4d3eb60766ba9f909f45
msgid "We can now run the full app. However, as we've added an extra requirement (``httpx``) we also need to update our app's requirements; we can do this by passing ``-r`` to ``briefcase run``. This will update our app's requirements, then re-build the app, then launch the app:"
msgstr ""

#: ../../tutorial/tutorial-8.rst:340 489bc950ebb14e93bec85657f85e4f0a
msgid "You should see you app running, and remaining responsive when you press the button and network content is retrieved."
msgstr ""

#: ../../tutorial/tutorial-8.rst:344 01cebcf2255f4ad2bc5994c730a38362
msgid "Next steps"
msgstr "下一步"

#: ../../tutorial/tutorial-8.rst:346 3bd395f4ee9a43f2abc2274c38a33c28
msgid "This has been a taste for what you can do with the tools provided by the BeeWare project. Over the course of this tutorial, you have:"
msgstr ""

#: ../../tutorial/tutorial-8.rst:349 327ecab331204e3c8f25f9f9cae041d5
msgid "Created a new GUI app project;"
msgstr ""

#: ../../tutorial/tutorial-8.rst:350 a73f815756a148ec8b1dc16b08eb1aa5
msgid "Run that app in development mode;"
msgstr ""

#: ../../tutorial/tutorial-8.rst:351 d3f857b0b3ae4a93b58bae2bdc231eb6
msgid "Built the app as a standalone binary for a desktop operating system;"
msgstr ""

#: ../../tutorial/tutorial-8.rst:352 65dd82521e064a9abe5adcab9bfc09ee
msgid "Packaged that project for distribution to others;"
msgstr ""

#: ../../tutorial/tutorial-8.rst:353 1f66c70ce66f4167a69605369abf6d62
msgid "Run the app on a mobile simulator and/or device;"
msgstr ""

#: ../../tutorial/tutorial-8.rst:354 cc9434e33c66450d8e15a06d490d8607
msgid "Run the app as a web app;"
msgstr ""

#: ../../tutorial/tutorial-8.rst:355 1a8bae83d8714925b6225f77baa4b499
msgid "Added a third-party dependency to your app; and"
msgstr ""

#: ../../tutorial/tutorial-8.rst:356 e26c63d4d2f1411aba97aa990a94a630
msgid "Modified the app so that it remains responsive."
msgstr ""

#: ../../tutorial/tutorial-8.rst:358 6c5a07763a8e474190de1652f073dcb3
msgid "So - where to from here?"
msgstr ""

#: ../../tutorial/tutorial-8.rst:360 5793fdd42f594711beafffb07db23baa
msgid "If you'd like to go further, there are some additional :doc:`topic tutorials </tutorial/topics/index>` that go into detail on specific aspects of application development."
msgstr ""

#: ../../tutorial/tutorial-8.rst:363 0700509e2747465dadaba91feb39538a
msgid "If you'd like to know more about how to build complex user interfaces with Toga, you can dive into `Toga's documentation <https://toga.beeware.org>`__. Toga also has it's own tutorial `demonstrating how to use various features of the widget toolkit <https://toga.beeware.org/en/latest/tutorial/index.html>`__."
msgstr ""

#: ../../tutorial/tutorial-8.rst:368 ac90a0317f4745ca8d501a5e80ebf04d
msgid "If you'd like to know more about the capabilities of Briefcase, you can dive into `Briefcase's documentation <https://briefcase.beeware.org>`__."
msgstr ""

#~ msgid "We've now got an application that is slick and responsive, even when it's waiting on a slow API. But how can we make sure that the app keeps working as we continue to develop it further? How do we test our app? Turn to :doc:`Tutorial 9 <tutorial-9>` to find out..."
#~ msgstr "现在，我们已经有了一个既流畅又反应灵敏的应用程序，即使在等待速度较慢的应用程序接口时也是如此。但是，我们如何确保在继续进一步开发的过程中，应用程序仍能正常运行？如何测试应用程序？请访问 :doc:`Tutorial 9<tutorial-9>` 了解详情..."

#~ msgid "The method is defined as ``async def``, rather than just ``def``. This tells Python that the method is an asynchronous coroutine."
#~ msgstr "方法定义为 ``asyncdef``，而不只是 ``def``。这告诉 Python 该方法是一个异步协程。"

#~ msgid "The ``get`` call is made with an ``await`` keyword. This instructs the app that while we are waiting for the response from the network, the app can release control to the event loop."
#~ msgstr "get \"调用带有 \"await \"关键字。这指示应用程序在等待网络响应时，可以将控制权释放给事件循环。"

#~ msgid "Let's add a ``httpx`` API call to our app. Add an import to the top of the ``app.py`` to import ``httpx``::"
#~ msgstr ""

#~ msgid "Lets run our updated app in Briefcase developer mode to check that our change has worked."
#~ msgstr ""

#~ msgid "If you'd like to know more about how to build complex user interfaces with Toga, you can dive into `Toga's documentation <https://toga.readthedocs.io>`__. Toga also has it's own tutorial `demonstrating how to use various features of the widget toolkit <https://toga.readthedocs.io/en/latest/tutorial/index.html>`__."
#~ msgstr ""

#~ msgid "If you'd like to know more about the capabilities of Briefcase, you can dive into `Briefcase's documentation <https://briefcase.readthedocs.io>`__."
#~ msgstr ""
