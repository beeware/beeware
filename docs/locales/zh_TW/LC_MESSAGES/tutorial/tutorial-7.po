# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2024, Russell Keith-Magee
# This file is distributed under the same license as the BeeWare package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
msgid ""
msgstr ""
"Project-Id-Version: BeeWare 0.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-06-20 03:05+0000\n"
"PO-Revision-Date: 2024-04-10 21:02+0000\n"
"Last-Translator: sus <jeffpeng2012@gmail.com>\n"
"Language: zh_TW\n"
"Language-Team: Chinese (Traditional) <https://hosted.weblate.org/projects/beeware/tutorial/tutorial-7/zh_Hant/>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../tutorial/tutorial-7.rst:3 c0efd6e2223c47118ab7f50bc1ebe1f9
#, fuzzy
msgid "Tutorial 7 - Get this (third)-party started"
msgstr "教學 7 - 啟動此（第三方）"

#: ../../tutorial/tutorial-7.rst:5 472fa4561e1440c8b8943696f9a54f53
#, fuzzy
msgid "So far, the app we've built has only used our own code, plus the code provided by BeeWare. However, in a real-world app, you'll likely want to use a third-party library, downloaded from the Python Package Index (PyPI)."
msgstr "到目前為止，我們建立的應用程式只使用了我們自己的程式碼，加上 BeeWare 提供的程式碼。但是，在現實應用程式中，您可能需要使用從 Python Package Index (PyPI) 下載的第三方程式庫。"

#: ../../tutorial/tutorial-7.rst:9 cead96f6abcd4e80a98319f42fdb0691
#, fuzzy
msgid "Let's modify our app to include a third-party library."
msgstr "讓我們修改我們的應用程式以包含第三方程式庫。"

#: ../../tutorial/tutorial-7.rst:12 09205e98844947a2a37eeb00a34a6610
msgid "Adding a package"
msgstr ""

#: ../../tutorial/tutorial-7.rst:14 dc4188b519dd4e0e90c1e23f690410bd
msgid "Let's modify our application to say a little bit more than just \"Hi, there!\"."
msgstr ""

#: ../../tutorial/tutorial-7.rst:16 6c43b52826de46dc8283b99f1ffd7cb8
msgid "To generate some more interesting text for the dialog, we're going to use a library called `Faker <https://faker.readthedocs.io/en/stable/>`__ . Faker is a Python package that generates fake content, including names and text blocks. The names and words in the text block are generated from an arbitrary list of words provided by Faker. We're going to use Faker to construct a fake message, as if someone is responding to the user."
msgstr ""

#: ../../tutorial/tutorial-7.rst:23 fe30468785e14c48ba8d0fdd9bb9fe8e
#, fuzzy
msgid "We start by adding ``faker`` to our app. Add an import to the top of the ``app.py`` to import ``faker``::"
msgstr "讓我們為我們的應用程式新增一個``httpx`` API 呼叫。將導入新增至``app.py``頂部以導入``httpx``::"

#: ../../tutorial/tutorial-7.rst:28 3ddb8bd6cb7144f39b0121d254a09073
#, fuzzy
msgid "Then modify the ``say_hello()`` callback so it looks like this::"
msgstr "然後修改``say_hello()``回調，使其看起來像這樣::"

#: ../../tutorial/tutorial-7.rst:39 2034a7fd1eeb48a8bea715e0983b5523
#, fuzzy
msgid "Let's run our updated app in Briefcase developer mode to check that our change has worked."
msgstr "讓我們在公文包開發者模式下運行更新後的應用程序，以檢查我們的更改是否有效。"

#: ../../tutorial/tutorial-7.rst:44 ../../tutorial/tutorial-7.rst:120
#: ../../tutorial/tutorial-7.rst:182 ../../tutorial/tutorial-7.rst:510
#: 7dae5ea8c04e472cb3268fab5a936f3e 8a7e8b7f8b1945679d57343911570db5
#: 8fc1dbc68e8e448492e9144011ea2d8d ebc851d45e334ff8ba808cb9c0203f1a
msgid "macOS"
msgstr "macOS"

#: ../../tutorial/tutorial-7.rst:64 ../../tutorial/tutorial-7.rst:134
#: ../../tutorial/tutorial-7.rst:220 ../../tutorial/tutorial-7.rst:531
#: 3f68199b67fc4f8f9a9931e38d883b98 5b6556276a744bfdb8dc8ab657f4641f
#: 85e90c4cb13c4cb3b6e50700b4f56c5c e7a2ff7dc11e47cda58baacb2241a1d9
msgid "Linux"
msgstr "Linux"

#: ../../tutorial/tutorial-7.rst:84 ../../tutorial/tutorial-7.rst:148
#: ../../tutorial/tutorial-7.rst:273 ../../tutorial/tutorial-7.rst:558
#: 64e3bb28bb78433c86f2807f86f3beca 709caaf512bc46bb8e20ea5f09383472
#: d9a11a39c2ed463bb30d6132e42cd0a9 ed99129dfb184ffe98859c7db4d19da8
msgid "Windows"
msgstr "Windows"

#: ../../tutorial/tutorial-7.rst:104 ../../tutorial/tutorial-7.rst:162
#: ../../tutorial/tutorial-7.rst:311 ../../tutorial/tutorial-7.rst:579
#: 1a0edc00237d4394ae8beaa4df6b486c 46577f537ad1470b85a5f8347a1e680d
#: c2c4c6cf9ff24fd59079a17db893fa0e e5495388c0ac42c783cef2c7af639b7c
msgid "Android"
msgstr ""

#: ../../tutorial/tutorial-7.rst:106 ../../tutorial/tutorial-7.rst:164
#: adcafc4f760a408d99e516abbe277acf f586d2763a7346c09f6070226fe200b7
msgid "You can't run an Android app in developer mode - use the instructions for your chosen desktop platform."
msgstr ""

#: ../../tutorial/tutorial-7.rst:109 ../../tutorial/tutorial-7.rst:167
#: ../../tutorial/tutorial-7.rst:384 ../../tutorial/tutorial-7.rst:596
#: 86dca11fa3404268b0161ab399752350 88b11beb12b544ba9f678a53f352f6fe
#: 9daf6fab255f48808586cb9964214894 ea09748bb9b74e91a5f69cd0875688e7
#, fuzzy
msgid "iOS"
msgstr "Windows"

#: ../../tutorial/tutorial-7.rst:111 ../../tutorial/tutorial-7.rst:169
#: 07e386caeee240fbbae03ea6d78213a4 1427661dd642454dacea01d69a9b1766
msgid "You can't run an iOS app in developer mode - use the instructions for your chosen desktop platform."
msgstr ""

#: ../../tutorial/tutorial-7.rst:114 f6db1525c17d42f2a7543c60bbfd757f
#, fuzzy
msgid "What happened? We've added ``faker`` to our *code*, but we haven't added it to our development virtual environment. We can fix this by installing ``faker`` with ``pip``, and then re-running ``briefcase dev``:"
msgstr "發生了什麼事？我們已將``httpx``新增至我們的*程式碼*中，但我們尚未將其新增至我們的開發虛擬環境。我們可以透過用``pip``安裝``httpx``來解決這個問題，然後重新執行``briefcase dev``："

#: ../../tutorial/tutorial-7.rst:127 ../../tutorial/tutorial-7.rst:141
#: ../../tutorial/tutorial-7.rst:155 3ff689a4fa554cbe8132f4985f26d3eb
#: 672a01904be84b3c9e65f81f7fa24234 d0e265865c274199aaa9def468256a39
#, fuzzy
msgid "When you enter a name and press the button, you should see a dialog that looks something like:"
msgstr "當您輸入名稱並按下按鈕時，您應該會看到一個類似以下內容的對話框："

#: ../../tutorial/tutorial-7.rst:130 99d741deb4664ce1b9d16bb094132529
#, fuzzy
msgid "Hello World Tutorial 7 dialog, on macOS"
msgstr "Hello World 教學 7 對話框，在 macOS 上"

#: ../../tutorial/tutorial-7.rst:144 d9a43e3b64df404f9102cc689571065c
#, fuzzy
msgid "Hello World Tutorial 7 dialog, on Linux"
msgstr "Linux 上的 Hello World 教學 7 對話框"

#: ../../tutorial/tutorial-7.rst:158 8d4a4c27bc444b3a8d155d66e1631003
#, fuzzy
msgid "Hello World Tutorial 7 dialog, on Windows"
msgstr "Hello World 教學 7 對話框，在 Windows 上"

#: ../../tutorial/tutorial-7.rst:172 ea5dd0fcae9b49959f23bd28fba5b720
#, fuzzy
msgid "We've now got a working app, using a third party library, running in development mode!"
msgstr "我們現在有了一個可以使用的應用程序，使用第三方庫，在開發模式下運行！"

#: ../../tutorial/tutorial-7.rst:175 5460877abe6044f4834d6a1110264ffe
#, fuzzy
msgid "Running the updated app"
msgstr "運行更新的應用程式"

#: ../../tutorial/tutorial-7.rst:177 db706f24f3f14acea55776d300538c14
#, fuzzy
msgid "Let's get this updated application code packaged as a standalone app. Since we've made code changes, we need to follow the same steps as in :doc:`Tutorial 4 <tutorial-4>`:"
msgstr "讓我們將此更新的應用程式程式碼打包為獨立應用程式。由於我們已經更改了程式碼，因此我們需要遵循 :doc:`教程 4 <tutorial-4>` 中的相同步驟："

#: ../../tutorial/tutorial-7.rst:184 ../../tutorial/tutorial-7.rst:222
#: ../../tutorial/tutorial-7.rst:275 ../../tutorial/tutorial-7.rst:313
#: ../../tutorial/tutorial-7.rst:386 7013c509dbf14c398c2e4328a19dabb7
#: 807365f81b9c4a06892171e4fbda97b5 9837d695dac94dc59919bcb49c5098cf
#: a81f5fa8e1854d94be9ccff4dbfdf8dd efe037ca8b17489fb5c2fba4005f6e5c
#, fuzzy
msgid "Update the code in the packaged app:"
msgstr "更新打包應用程式中的程式碼："

#: ../../tutorial/tutorial-7.rst:195 ../../tutorial/tutorial-7.rst:233
#: ../../tutorial/tutorial-7.rst:286 ../../tutorial/tutorial-7.rst:324
#: ../../tutorial/tutorial-7.rst:397 3e50d2ad7b9343bfa5fe1b9d30e69566
#: 6be112856384466b87e9529fc180812e 9fa1aa54ff9147f69d1395aa54a9ddb6
#: b201647956c04b5ba38095664614fd7f d6b434737e08477eb70d40ae14fc99dd
#, fuzzy
msgid "Rebuild the app:"
msgstr "重建應用程式："

#: ../../tutorial/tutorial-7.rst:204 ../../tutorial/tutorial-7.rst:247
#: ../../tutorial/tutorial-7.rst:295 0e61f9866bf74dbabe7821a9a8f1be51
#: a0dda02885e64aa7b9e5a8212bca2cc6 d85824e1dbee476688cc9ba4dbd149cc
#, fuzzy
msgid "And finally, run the app:"
msgstr "最後，運行應用程式："

#: ../../tutorial/tutorial-7.rst:213 ../../tutorial/tutorial-7.rst:304
#: a717aa77f2744aed9ab8a6e97e889275 e0076d766e98444f93acc773c3b0e0c6
#, fuzzy
msgid "However, when the app runs, you'll see an error in the console, plus a crash dialog:"
msgstr "但是，當應用程式運行時，您會在控制台中看到錯誤，以及崩潰對話框："

#: ../../tutorial/tutorial-7.rst:216 778e3a366fa641df81fd69c54afe1038
#, fuzzy
msgid "Hello World Tutorial 7 app crash, on macOS"
msgstr "Hello World 教學 7 應用程式崩潰，在 macOS 上"

#: ../../tutorial/tutorial-7.rst:256 ../../tutorial/tutorial-7.rst:343
#: 670da6f45ee14d4ab099eab4ef9d22fa 6fff23e2d8cc40e6a5c4f0c4e4020782
#, fuzzy
msgid "However, when the app runs, you'll see an error in the console:"
msgstr "但是，當應用程式運行時，您會在控制台中看到錯誤："

#: ../../tutorial/tutorial-7.rst:307 8d46265283d543c4af1979f8bd1d6a43
#, fuzzy
msgid "Hello World Tutorial 7 app crash, on Windows"
msgstr "Hello World 教學 7 應用程式崩潰，在 Windows 上"

#: ../../tutorial/tutorial-7.rst:334 ../../tutorial/tutorial-7.rst:407
#: d9f2add6a28048a1b742d3419e471f4a ec0ab879017b49fd835ba3c58e1525bd
msgid "And finally, run the app (selecting a simulator when prompted):"
msgstr ""

#: ../../tutorial/tutorial-7.rst:417 e37adecf12b147499b84d6d0a81dcc6e
#, fuzzy
msgid "However, when the app runs, you'll see an error in the console"
msgstr "但是，當應用程式運行時，您會在控制台中看到錯誤："

#: ../../tutorial/tutorial-7.rst:430 2f324c4a01894ed0b721c0c412a9cb4a
#, fuzzy
msgid "Once again, the app has failed to start because ``faker`` has not been installed - but why? Haven't we already installed ``faker``?"
msgstr "再一次，應用程式無法啟動，因為``httpx``已安裝 - 但為什麼呢？我們不是已經安裝了``httpx``了嗎？"

#: ../../tutorial/tutorial-7.rst:433 fb87efada5cd49ef845fd4a5ab1e8db7
#, fuzzy
msgid "We have - but only in the development environment. Your development environment is entirely local to your machine - and is only enabled when you explicitly activate it. Although Briefcase has a development mode, the main reason you'd use Briefcase is to package up your code so you can give it to someone else."
msgstr "我們有 - 但僅限於開發環境。您的開發環境完全位於您的電腦本機 - 並且僅在您明確啟動它時才啟用。儘管Briefcase 有開發模式，但您使用Briefcase 的主要原因是打包您的程式碼，以便提供給其他人。"

#: ../../tutorial/tutorial-7.rst:438 5172e39e75df4448a4e86bc10c850ae4
#, fuzzy
msgid "The only way to guarantee that someone else will have a Python environment that contains everything it needs is to build a completely isolated Python environment. This means there's a completely isolated Python install, and a completely isolated set of dependencies. This is what Briefcase is building when you run ``briefcase build`` - an isolated Python environment. This also explains why ``faker`` isn't installed - it has been installed in your *development* environment, but not in the packaged app."
msgstr "確保其他人擁有一個包含其所需一切的Python環境的唯一方法是建立一個完全隔離的Python環境。這意味著有一個完全隔離的 Python 安裝和一組完全隔離的依賴項。這就是當您執行``briefcase build``時，Briefcase 正在建置的內容—一個獨立的 Python 環境。這也解釋了為什麼未安裝``httpx`` - 它已安裝在您的*開發*環境中，但未安裝在打包的應用程式中。"

#: ../../tutorial/tutorial-7.rst:446 4b700f94f1714359932076ce06ba3687
#, fuzzy
msgid "So - we need to tell Briefcase that our app has an external dependency."
msgstr "因此 - 我們需要告訴 Briefcase 我們的應用程式具有外部相依性。"

#: ../../tutorial/tutorial-7.rst:449 276e4e62ced044f6b62db178aebcd90f
#, fuzzy
msgid "Updating dependencies"
msgstr "更新依賴項"

#: ../../tutorial/tutorial-7.rst:451 6239de13291746109c96df501f58da60
#, fuzzy
msgid "In the root directory of your app, there is a file named ``pyproject.toml``. This file contains all the app configuration details that you provided when you originally ran ``briefcase new``."
msgstr "在應用程式的根目錄中，有一個名為``pyproject.toml``的檔案。該檔案包含您最初執行``briefcase new``時提供的所有應用程式設定詳細資訊。"

#: ../../tutorial/tutorial-7.rst:455 47d6b648eb164a31b547218623300f6d
#, fuzzy
msgid "``pyproject.toml`` is broken up into sections; one of the sections describes the settings for your app::"
msgstr "``pyproject.toml`` 被分成幾個部分；其中一節描述了您的應用程式的設定：："

#: ../../tutorial/tutorial-7.rst:466 a252902c2f9a4d9fb8f3f3374c0170d4
#, fuzzy
msgid "The ``requires`` option describes the dependencies of our application. It is a list of strings, specifying libraries (and, optionally, versions) of libraries that you want to be included with your app."
msgstr "``requires`` 選項描述了我們應用程式的依賴關係。它是一個字串列表，指定您想要包含在應用程式中的庫（以及可選的版本）。"

#: ../../tutorial/tutorial-7.rst:470 5e27f6177930468a8446e66b7f1b929f
#, fuzzy
msgid "Modify the ``requires`` setting so that it reads::"
msgstr "修改``requires``設置，使其顯示為："

#: ../../tutorial/tutorial-7.rst:476 df60ab672c2945b68fb40a3a348e1fdb
#, fuzzy
msgid "By adding this setting, we're telling Briefcase \"when you build my app, run ``pip install faker`` into the application bundle\". Anything that would be legal input to ``pip install`` can be used here - so, you could specify:"
msgstr "透過添加此設置，我們告訴 Briefcase``當您建立我的應用程式時，在應用程式包中執行``pip install httpx````。任何可以作為``pip install``合法輸入的內容都可以在這裡使用 - 因此，您可以指定："

#: ../../tutorial/tutorial-7.rst:480 d905b501f787437eacde6644361c0728
#, fuzzy
msgid "A specific library version (e.g., ``\"faker==37.3.0\"``);"
msgstr "特定的庫版本（例如``httpx==0.19.0``）；"

#: ../../tutorial/tutorial-7.rst:481 22ce0f530606436f9f42e7f9b09380ba
#, fuzzy
msgid "A range of library versions (e.g., ``\"faker>=37\"``);"
msgstr "一系列庫版本（例如``httpx>=0.19``）；"

#: ../../tutorial/tutorial-7.rst:482 d6a1f10d8d634ece9f6ea69e91bdc335
#, fuzzy
msgid "A path to a git repository (e.g., ``\"git+https://github.com/joke2k/faker/\"``); or"
msgstr "git 儲存庫的路徑（例如，``\"git+https://github.com/encode/httpx\"``）；或者"

#: ../../tutorial/tutorial-7.rst:484 6cecaaecf99e42308c77b334abca2429
#, fuzzy
msgid "A local file path (However - be warned: if you give your code to someone else, this path probably won't exist on their machine!)"
msgstr "本機檔案路徑（但是 - 請注意：如果您將程式碼提供給其他人，則該路徑可能不會存在於他們的電腦上！）"

#: ../../tutorial/tutorial-7.rst:487 16fa028aec224fdeae417206060732c3
#, fuzzy
msgid "Further down in ``pyproject.toml``, you'll notice other sections that are operating system dependent, like ``[tool.briefcase.app.helloworld.macOS]`` and ``[tool.briefcase.app.helloworld.windows]``. These sections *also* have a ``requires`` setting. These settings allow you to define additional platform-specific dependencies - so, for example, if you need a platform-specific library to handle some aspect of your app, you can specify that library in the platform-specific ``requires`` section, and that setting will only be used for that platform. You will notice that the ``toga`` libraries are all specified in the platform-specific ``requires`` section - this is because the libraries needed to display a user interface are platform specific."
msgstr "在``pyproject.toml``中，您會注意到與作業系統相關的其他部分，例如``[tool.briefcase.app.helloworld.macOS]``和``[tool.briefcase.app.helloworld``.windows]`` 。這些部分*也*有一個``requires``設定。這些設定允許您定義其他特定於平台的依賴項 - 因此，例如，如果您需要特定於平台的庫來處理應用程式的某些方面，您可以在特定於平台的``requires``部分中指定該庫，並且該設定將僅用於該平台。您會注意到``toga``庫都是在特定於平台的``requires``部分中指定的 - 這是因為顯示使用者介面所需的庫是特定於平台的。"

#: ../../tutorial/tutorial-7.rst:498 72c98c1bd8c94d9282fff5c2f44dc0a8
#, fuzzy
msgid "In our case, we want ``faker`` to be installed on all platforms, so we use the app-level ``requires`` setting. The app-level dependencies will always be installed; the platform-specific dependencies are installed *in addition* to the app-level ones."
msgstr "在我們的例子中，我們希望在所有平台上安裝``httpx``，因此我們使用應用程式層級``requires``設定。應用程式級相依性將始終被安裝；除了*應用程式層級的依賴項之外，還會安裝特定於平台的依賴項。"

#: ../../tutorial/tutorial-7.rst:503 a8e67eb88ee04c0aaf84bb4211b60001
#, fuzzy
msgid "Now that we've told Briefcase about our additional requirements, we can try packaging our app again. Ensure that you've saved your changes to ``pyproject.toml``, and then update your app again - this time, passing in the ``-r`` flag. This tells Briefcase to update requirements in the packaged app:"
msgstr "現在我們已經告訴 Briefcase 我們的附加要求，我們可以嘗試再次打包我們的應用程式。確保您已將變更儲存到``pyproject.toml``，然後再次更新您的應用程式 - 這次傳入``-r``標誌。這告訴 Briefcase 更新打包應用程式中的要求："

#: ../../tutorial/tutorial-7.rst:618 53dd1d14388a4b14aabb32571881b24e
#, fuzzy
msgid "Once you've updated, you can run ``briefcase build`` and ``briefcase run`` - and you should see your packaged app, with the new dialog behavior."
msgstr "更新後，您可以運行``briefcase build``和``briefcase run`` - 您應該會看到打包的應用程序，具有新的對話框行為。"

#: ../../tutorial/tutorial-7.rst:623 212ecdb25e7f44bfafcccfad3278b595
#, fuzzy
msgid "The ``-r`` option for updating requirements is also honored by the ``build`` and ``run`` command, so if you want to update, build, and run in one step, you could use ``briefcase run -u -r``."
msgstr "用於更新需求的``-r``選項也受到``build``和``run``命令的支持，因此如果您想一步更新、構建和運行，您可以使用``briefcase``運行-u -r``。"

#: ../../tutorial/tutorial-7.rst:628 82cc25257ce64cdca51f7004bca9ad26
msgid "Third-Party Python Packages for Mobile and Web"
msgstr ""

#: ../../tutorial/tutorial-7.rst:630 d5316114365040f186e92d31241ce51d
msgid "Faker is just one example of a third-party Python package - a collection of code that isn't part what Python provides out of the box. These third-party packages are most commonly distributed using the `Python Package Index (PyPI) <https://pypi.org>`__, and installed into your local virtual environment. We've been using ``pip`` in this tutorial, but there are other options."
msgstr ""

#: ../../tutorial/tutorial-7.rst:636 c7390312cc7e4283b3c4fdd7c0fd2b1e
#, fuzzy
msgid "On desktop platforms (macOS, Windows, Linux), essentially any package on PyPI package can be installed into your virtual environment, or added to your app's requirements. However, when building an app for mobile or web platforms, `your options are slightly limited <https://briefcase.beeware.org/en/latest/about/faq.html#can-i-use-third-party-python-packages-in-my-app>`__."
msgstr "在桌面平台（macOS、Windows、Linux）上，任何可安裝的``pip``都可以加入您的需求。在行動和網路平台上，`您的選擇略有限制 <https://briefcase.readthedocs.io/en/latest/background/faq.html#can-i-use-third-party-python-packages-in-my-app>`__。"

#: ../../tutorial/tutorial-7.rst:642 664dfce986f0485ca7eca4f9faf582a6
msgid "In short; any *pure Python* package (i.e. any package created from a project written *only* in Python) can be used without difficulty. Some packages, though, are created from projects that contain both Python and other languages (e.g. C, C++, Rust, etc). Code written in those languages needs to be compiled to platform-specific binary modules before it can be used, and those pre-compiled binary modules are only available on specific platforms. Mobile and web platforms have very different requirements than \"standard\" desktop platforms. At this time, most Python packages don't provide pre-compiled binaries for mobile and web platforms."
msgstr ""

#: ../../tutorial/tutorial-7.rst:652 354416bc40b2413db2c9a8eaf1631a1a
msgid "On PyPI, packages are often provided in a pre-built distribution format called *wheels*. To check whether a package is pure Python, look at the PyPI downloads page for the project. If the wheels provided have a ``-py3-none-any.whl`` suffix (e.g., `Faker <https://pypi.org/project/Faker/37.3.0/#files>`__), then they are pure Python wheels. However, if the wheels have version and platform-specific extensions (e.g., `Pillow <https://pypi.org/project/pillow/11.2.1/#files>`__, which has wheels with suffixes like ``-cp313-cp313-macosx_11_0_arm64.whl`` and ``-cp39-cp39-win_amd64.whl``), then the wheel *contains a binary component*. That package cannot be installed on mobile or web platforms unless a wheel compatible with those platforms has been provided."
msgstr ""

#: ../../tutorial/tutorial-7.rst:663 c5f2d43782ff42209897812761170c9d
msgid "At this time, *most* binary packages on PyPI don't provide mobile- or web-compatible wheels. To fill this gap, BeeWare provides binaries for some popular binary modules (including ``numpy``, ``pandas``, and ``cryptography``). These wheels are *not* distributed on PyPI, but Briefcase will install those wheels if they're available."
msgstr ""

#: ../../tutorial/tutorial-7.rst:669 e7bb35e7d20f4070b8ab1240b0eb5bb7
#, fuzzy
msgid "It's *usually* possible to compile binary packages for mobile platforms, but it's not easy to set up -- well outside the scope of an introductory tutorial like this one."
msgstr "BeeWare 可以為一些流行的二進位模組（包括``numpy``、``pandas``和``cryptography``）提供二進位檔案。 *通常* 可以為行動平台編譯軟體包，但設定起來並不容易——這遠遠超出了像本教程這樣的介紹性教程的範圍。"

#: ../../tutorial/tutorial-7.rst:674 8a7f7a9286f24bd885b5bd817922e866
msgid "Next steps"
msgstr "下一步"

#: ../../tutorial/tutorial-7.rst:676 86a6c33a637747cba0140da79aa603cf
msgid "We've now got an app that uses a third-party library! In :doc:`Tutorial 8 <tutorial-8>` we'll learn how to ensure our app remains responsive as we add more complex application logic."
msgstr ""

#~ msgid "Accessing an API"
#~ msgstr "存取 API"

#~ msgid "A common task an app will need to perform is to make a request on a web API to retrieve data, and display that data to the user. This is a toy app, so we don't have a *real* API to work with, so we'll use the `{JSON} Placeholder API <https://jsonplaceholder.typicode.com>`__ as a source of data."
#~ msgstr "應用程式需要執行的常見任務是在 Web API 上發出請求以檢索數據，並向使用者顯示該數據。這是一個玩具應用程序，因此我們沒有*真正的* API 可供使用，因此我們將使用 `{JSON} Placeholder API <https://jsonplaceholder.typicode.com>`__ 作為來源資料。"

#~ msgid "The {JSON} Placeholder API has a number of \"fake\" API endpoints you can use as test data. One of those APIs is the ``/posts/`` endpoint, which returns fake blog posts. If you open ``https://jsonplaceholder.typicode.com/posts/42`` in your browser, you'll get a JSON payload describing a single post - some `Lorum ipsum <https://en.wikipedia.org/wiki/Lorem_ipsum>`__ content for a blog post with ID 42."
#~ msgstr "{JSON} Placeholder API 有許多``假``API 端點，您可以將其用作測試資料。這些 API 之一是``/posts/``端點，它會傳回虛假的部落格文章。如果您在瀏覽器中開啟 ``https://jsonplaceholder.typicode.com/posts/42``，您將獲得一個描述單一貼文的 JSON 有效負載 - 一些 `Lorum ipsum <https://en.wikipedia.org/wiki/Lorem_ipsum>`__ ID 為42 的部落格文章的內容。"

#~ msgid "The Python standard library contains all the tools you'd need to access an API. However, the built-in APIs are very low level. They are good implementations of the HTTP protocol - but they require the user to manage lots of low-level details, like URL redirection, sessions, authentication, and payload encoding. As a \"normal browser user\" you're probably used to taking these details for granted, as a browser manages these details for you."
#~ msgstr "Python 標準函式庫包含存取 API 所需的所有工具。然而，內建的 API 等級非常低。它們是 HTTP 協定的良好實作 - 但它們要求使用者管理大量低階細節，例如 URL 重新導向、會話、驗證和有效負載編碼。作為``普通瀏覽器用戶``，您可能習慣於將這些詳細資訊視為理所當然，因為瀏覽器會為您管理這些詳細資訊。"

#~ msgid "As a result, people have developed third-party libraries that wrap the built-in APIs and provide a simpler API that is a closer match for the everyday browser experience. We're going to use one of those libraries to access the {JSON} Placeholder API - a library called `httpx <https://www.python-httpx.org>`__."
#~ msgstr "因此，人們開發了第三方函式庫來包裝內建 API，並提供更簡單的 API，更適合日常瀏覽器體驗。我們將使用其中一個函式庫來存取 {JSON} Placeholder API - 一個名為 `httpx <https://www.python-httpx.org>`__ 的函式庫。"

#~ msgid "This will change the ``say_hello()`` callback so that when it is invoked, it will:"
#~ msgstr "這將更改``say_hello()``回調，以便在調用它時，它將："

#~ msgid "make a GET request on the JSON placeholder API to obtain post 42;"
#~ msgstr "對 JSON 佔位符 API 發出 GET 請求以取得 post 42；"

#~ msgid "decode the response as JSON;"
#~ msgstr "將回應解碼為 JSON；"

#~ msgid "extract the body of the post; and"
#~ msgstr "擷取貼文內文；和"

#~ msgid "include the body of that post as the text of the dialog."
#~ msgstr "包括該帖子的正文作為對話框的文字。"

#~ msgid "Some binary packages may not be available"
#~ msgstr "某些二進位套件可能不可用"

#~ msgid "In short; any *pure Python* package (i.e., packages that do *not* contain a binary module) can be used without difficulty. However, if your dependency contains a binary component, it must be compiled; at this time, most Python packages don't provide compilation support for non-desktop platforms."
#~ msgstr "簡而言之;任何 *純Python* 套件（即，*不* 包含二進位模組的套件）都可以毫無困難地使用。但是，如果您的依賴項包含二進位元件，則必須對其進行編譯；目前，大多數Python套件不提供非桌面平台的編譯支援。"

#~ msgid "We've now got an app that uses a third-party library! However, you may have noticed that when you press the button, the app becomes a little unresponsive. Can we do anything to fix this? Turn to :doc:`Tutorial 8 <tutorial-8>` to find out..."
#~ msgstr "我們現在有了一個使用第三方函式庫的應用程式！但是，您可能已經注意到，當您按下按鈕時，應用程式變得有點無響應。我們能做些什麼來解決這個問題嗎？前往 :doc:`教學 8 <tutorial-8>` 找出..."

